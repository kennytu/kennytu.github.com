---
layout: post
title: "Sails練習之二"
date: 2015-11-17 10:54:23 +0800
comments: true
categories: sails
---


本篇是接著Irl nathan的這篇

<a href="https://www.youtube.com/watch?v=qUAzpyThAB0&index=5&list=PLWsZeJCry-F4K4iRImeB3-i0S5mw9Ak-W" target="_blank">Building a Sails Application: Ep3[UPDATED] - A user model/controller, signup page, sails blueprints</a>

底下為練習內容

<!--more-->


##MVC架構

Sails有支援MVC架構, 所以若你有想要完成一個概念性的物件, 這個物件有相對的屬性和行為,Sails會將這個物件的屬性放在Modules, 而行為就放在Controller

使用下列的語法來讓Sails自動創建Controller以及Module

```batch
E:\sails_app\activeityOverload>sails generate api user
info: Created a new api!
```

PS: 舊版的只要輸入`sails generate user` 就可以了

這樣Sails會在

`api\controllers` 產生 `UserController.js`

`api\models` 產生 `User.js`

其中, 

`controllers`放的是`action`的邏輯

`modules`裡面放的是`attributes`的設定

OK, 接著我們來設計User的屬性, 修改 User.js

```js
module.exports = {

  attributes: {
    name:{
        type: 'string',
        required: true
    },

    title:{
        type: 'string'
    },

    email: {
      type: 'email',
      required: true,
      unique: true
    },

    encryptedPassword:{
        type: 'string'
    }
  }
};
```
要注意上面的email寫法, sails 0.10以後, type要改成'email'

然後原本的email: true要拿掉

參考<a href="https://github.com/irlnathan/activityoverlord20/issues/13" target="_blank">這裡</a>

編輯完成之後, 存檔, 執行 `sails lift`

若是第一次新增api, sails應該會跳出底下的訊息

```batch
E:\sails_app\activeityOverload>sails lift

info: Starting app...

-----------------------------------------------------------------

 Excuse my interruption, but it looks like this app
 does not have a project-wide "migrate" setting configured yet.
 (perhaps this is the first time you're lifting it with models?)

 In short, this setting controls whether/how Sails will attempt to automatically
 rebuild the tables/collections/sets/etc. in your database schema.
 You can read more about the "migrate" setting here:
 http://sailsjs.org/#/documentation/concepts/ORM/model-settings.html?q=migrate

 In a production environment (NODE_ENV==="production") Sails always uses
 migrate:"safe" to protect inadvertent deletion of your data.
 However during development, you have a few other options for convenience:

 1. safe  - never auto-migrate my database(s). I will do it myself (by hand)
 2. alter - auto-migrate, but attempt to keep my existing data (experimental)
 3. drop  - wipe/drop ALL my data and rebuild models every time I lift Sails

What would you like Sails to do?

info: To skip this prompt in the future, set `sails.config.models.migrate`.
info: (conventionally, this is done in `config/models.js`)

warn: ** DO NOT CHOOSE "2" or "3" IF YOU ARE WORKING WITH PRODUCTION DATA **

prompt: ?:  error: Error: The hook `orm` is taking too long to load.
Make sure it is triggering its `initialize()` callback, or else set `sails.config.orm._hookTimeout to a higher value (currently 20000)
    at tooLong [as _onTimeout] (C:\Users\KennyTu\AppData\Roaming\npm\node_modules\sails\lib\app\private\loadHooks.js:92:21)
    at Timer.listOnTimeout (timers.js:89:15)
```

既然上面有提示到這個<a href="http://sailsjs.org/documentation/concepts/models-and-orm/model-settings#?migrate" target="_blank">網頁</a>, 我們就去看一下

大意就是說, sails他會做一些策略, 來和我們的資料庫互動, migrate(中文有遷移, 移居的意思), 有三種策略, 分別是safe, alter以及drop, 詳細我就不多說了, 去看網頁寫的很清楚

OK, 接下來我們要做的動作是去修改`config/models.js`

```js
module.exports.models = {

  /***************************************************************************
  *                                                                          *
  * Your app's default connection. i.e. the name of one of your app's        *
  * connections (see `config/connections.js`)                                *
  *                                                                          *
  ***************************************************************************/
  // connection: 'localDiskDb',

  /***************************************************************************
  *                                                                          *
  * How and whether Sails will attempt to automatically rebuild the          *
  * tables/collections/etc. in your schema.                                  *
  *                                                                          *
  * See http://sailsjs.org/#!/documentation/concepts/ORM/model-settings.html  *
  *                                                                          *
  ***************************************************************************/
   migrate: 'safe'

};

```

把migrate改成safe, 再重新執行`sails lift`

基本上應該就沒問題可以正常執行了

接下來開啟瀏覽器, 輸入底下網址..

作者在輸入到一半的時候,故意只輸入部分, 來讓我們看一下出錯的效果

`http://localhost:1337/user/create?name=kenny`

伺服器回應的結果是:

```js
{
  "error": "E_VALIDATION",
  "status": 400,
  "summary": "1 attribute is invalid",
  "model": "User",
  "invalidAttributes": {
    "email": [
      {
        "rule": "email",
        "message": "`undefined` should be a email (instead of \"null\", which is a object)"
      },
      {
        "rule": "required",
        "message": "\"required\" validation rule failed for input: null"
      }
    ]
  }
}
```

大意就是說, email需要輸入

我們再改一個正常的

在瀏覽器輸入URL如下

http://localhost:1337/user/create?name=kennyg&email=i@a.com

注意email不能有用過的, 因為我們將`email`的其中一個`unique`的屬性設定為true

若沒有意外, 應該出現如下視窗

```js
{
  "name": "kennyg",
  "email": "i@a.com",
  "createdAt": "2015-11-17T07:19:54.897Z",
  "updatedAt": "2015-11-17T07:19:54.897Z",
  "id": 2
}

```

大功告成啦!

注意一點, 我們現在還沒有對`UserController.js`寫任何邏輯, 以上的行為都是sails系統預設的 :)

> 預設行為都放在blueprints.js下

接下來, 我們要開始弄View的東西, 之前Sails幫我們自動生成Module以及Controller, 

我們手動在`views`新增一個資料夾`user`,然後在`user`資料夾新增一個檔案名為`new.ejs`, 新增內容如下

```html
<h1> User signup Form </h1>
```

回到`UserController.js`, 在`api\controllers`底下

我們新增以下的code

```js
module.exports = {
    'new': function(req, res){
        res.view();
    }
};

```

重新啟動sails, 回到瀏覽器輸入localhost:1337, 按下Sing Up now, 視窗就會跳到new.ejs的page去

還記得嗎? 我們在static底下的index.ejs, button的href是指到/user/new這個action, 所以就會跳到new這邊來了

一般來說, sails會自動幫我們對應action以及底下的檔案, 若要關掉它, 就要去設定

現在我們修改`blueprints.js`, 在`config`底下

找到`rest`, 把他設定成`false`. __記得要把註解拿掉__

參照以下設定

	rest: false,
	shortcuts: false,
	actions: false,


設定好, 存檔, 重新啟動sails 

這時候進入首頁, 按下Sing up now, 我們會被導入404 pages

接著我們就開始手工打造我們的mapping

回到routes.js, 加入底下的code

```js routes.js 片段
	'/': {
	    view: 'static/index'
  	},
  	'/user/new': {
    	view: 'user/new'
  	}
```


從新啟動sails, 再次執行sing up now, 就可以導向到我們的頁面了

另一種routes.js風格的寫法, 如下

```js
 	'user/new': {
    	controller: "UserController",
    	action:"new"
  	}
```


這樣的寫法我在新版的sails上面都沒有辦法get到頁面, 不知道是不是要明確指定view才行

另外, 有關routes的其他寫法, 請參考<a href="http://sailsjs.org/documentation/concepts/routes/custom-routes" target="_blank">Custom Routes</a>的 __Controller / action target syntax__ 章節

> ok, 我們先繼續, 等之後有靈感在回來試試看


現在先將剛剛在routes.js加入的'user/new'這一些敘述都刪掉, 存檔

回到`blueprints.js`, 將`action`改成`true`

然後修改new.ejs, 如底下的程式碼

```html new.ejs
<form action="/user/create" method="POST" class="form-signin">
  <h2 > Create an account</h2>
  <input type="text" class="form-control" placeholder="your name" name="name">
  <input type="text" class="form-control" placeholder="your title" name="title">
  <input type="text" class="form-control" placeholder="email address" name="email">
  <input type="password" class="form-control" placeholder="password" name="password">
  <input type="password" class="form-control" placeholder="password confirmation" name="comfirmation">

  <input type="submit" class="btn btn-lg btn-primary btn-block" value="Create Account"/>
  <input type="hidden" name="_csrf" value="<%= _csrf %>"/>

</form>

```

由於new.ejs有用到一些css, 作者也對custom.less做了一些修改

程式碼如下

```css custom.less
@white: #FFFFFF;
@green: #9EC03B;
@orange: #F48744;
@blue: #189ECA;
@gray: #777574;
@lightGrey: #AAAAAA;
@darkBlue: #106E8D;
@darkGray: #4A4A4A; // paragraphs
@red: #D16565; // error

body {
  padding-top: 60px;
  padding-bottom: 40px;
}

.jumbotron {
  text-align: center;
}

.jumbotron h2 {
  font-size: 1.5em;
  letter-spacing: -1px;
  margin-bottom: 30px;
  text-align: center;
  font-weight: normal;
  color: gray;
}

.container .gray{
  color: gray
}

.container{
  .footer{
    width: 25%;
  }
}

.form-signin {
  max-width: 30%;
  padding: 19px 29px 29px;
  margin: 0 auto 20px;
  margin-top: 20px;
  background-color: @lightGrey;
  border: 1px solid @green;
  -webkit-border-radius: 15px;
  -moz-border-radius: 15px;
  border-radius: 15px;

    h2{
      text-align: center;
      margin-top: 0px;
    }
}

.form-signin input[type="text"],
.form-signin input[type="password"]{
  font-size: 16px;
  height: auto;
  margin-bottom: 15px;
  padding: 7px 9px;
}

```

OK, 回到瀏覽器, 在reflash一次, 應該會出現像樣的登入畫面了

以上就是這一堂課的練習

