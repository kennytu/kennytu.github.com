<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sails | 江湖險惡，我從來都不輕易留下我的姓名。]]></title>
  <link href="http://kennytu.github.io/blog/categories/sails/atom.xml" rel="self"/>
  <link href="http://kennytu.github.io/"/>
  <updated>2015-12-10T19:09:58+08:00</updated>
  <id>http://kennytu.github.io/</id>
  <author>
    <name><![CDATA[Kenny Tu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NPM的怪問題]]></title>
    <link href="http://kennytu.github.io/blog/2015/12/09/npm-weird-issue/"/>
    <updated>2015-12-09T20:13:55+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/12/09/npm-weird-issue</id>
    <content type="html"><![CDATA[<p>好的, 這篇我要來好好的念一下NPM, 也就是 package manager for node.js</p>

<p>這真的太令我生氣啦!!!</p>

<p>如果你是用<strong>WIN7</strong>&hellip; 對! 就是<strong>WIN7</strong>, 你可能會遇到底下我遇到的問題</p>

<p>當你去了官網 <a href="https://nodejs.org/en/">nodejs.org</a> 下載Windows的安裝包, 安裝完成之後, 通常<code>npm</code>都會一起被安裝進去了</p>

<p>這個時候你開啟<code>cmd</code>, 輸入<code>node</code>或者<code>npm</code>, 應該都已經可以執行</p>

<!--more-->


<p>好的, 然後你就用了一段時間, 使用<code>npm install -g</code>巴拉巴拉 用的很高興</p>

<p>突然間, 你看到網路上, 欸! 有<code>node.js</code>以及<code>npm</code>的<strong>更新</strong>耶, 超爽Der</p>

<p>你就順手的打開<code>cmd</code>, 輸入<code>npm update -g</code></p>

<p>然後<code>npm</code>跑了好一段時間來update&hellip;.</p>

<h2>接著..噩夢從此開始&hellip;</h2>

<p>你開心地覺得有更新版的可用真好</p>

<p>然後阿</p>

<p>你又在node.js找到一些想要用的module, OK</p>

<p>馬上來玩玩看! 使用 <code>npm install 巴拉巴拉 -g</code></p>

<p>疑!? ERROR!?</p>

<p>蛤!!?!? 簡單的裝個npm install 套件, 居然會ERROR?!!?</p>

<p>大概類似出現底下這樣,</p>

<p><code>npm err windows_nt 6.1.7601</code></p>

<p>然後還有什麼&hellip;</p>

<p><code>Error: EXDEV, cross-device link not permitted</code></p>

<p>OK, 你開始找問題, 上網搜尋了一堆, 大家好像也都遇到奇怪的問題</p>

<p>然後還會亂給建議&hellip;</p>

<p>沒辦法! 真的沒頭緒, 只能一個個Try&hellip;</p>

<p>不管如何Try, 你會發現這個ERROR出現的太詭異了&hellip;</p>

<p>找啊找的.. 真的完全沒頭緒</p>

<p>你快瘋了&hellip;</p>

<h2>就這樣, 突然靈光一閃</h2>

<p>好的, 遇到一些奇怪的問題時, 真的沒辦法解, 你會想要怎麼做?</p>

<p>對, 使用<strong>Clean Room</strong>的環境!!!</p>

<p>先解釋什麼叫做<code>Clean Room</code>, <code>Clean Room</code>就是在乾淨的地方, 重新做一次實驗</p>

<p>我想到, 假如我安裝個模組就出現一堆ERROR, 那node.js release manager不就是要去吃&hellip;嗎!!</p>

<p>當然他不會吃&hellip;! 他一定會做好完整的測試才會Release對吧!?</p>

<p>OK, 所以呢, 接下來, 我執行了</p>

<ol>
<li><code>npm cache clean -f</code> (npm還會跳出一個警告視窗說: 你確定你知道你要做的是什麼對吧?)</li>
<li><code>npm install -g</code> (重裝一次)</li>
</ol>


<p>好的, 沒用!</p>

<p><strong>Fuxxxxk!</strong></p>

<h2>突然間, 又靈光一閃</h2>

<p><code>npm cache clean</code> 真的有完全清除嗎!?</p>

<p>我就到了<code>C:\Users\KennyTu\AppData\Roaming</code>目錄下的<code>npm-cache</code>去看, 執行完clean之後, 這個目錄的東西完全沒動到阿!</p>

<p>為什麼我會知道要去這個<code>C:\Users\KennyTu\AppData\Roaming</code>目錄呢, 你就執行</p>

<p><code>npm config get prefix</code>, npm就會return它把安裝的東西放到哪邊去了</p>

<p>哈哈哈哈~~~</p>

<p>好的, 最後我怎麼做呢?</p>

<h2>最終解法</h2>

<p>不囉嗦, 照著底下做</p>

<ol>
<li>從windows的新增移除程式, 移除node.js以及相關的套件(如果有的話)</li>
<li>到<code>C:\Users\KennyTu\AppData\Roaming</code>把<code>npm-cache</code>以及<code>npm</code>這兩個目錄幹掉!</li>
<li>重開機</li>
<li>重新從<a href="https://nodejs.org/en/">nodejs.org</a> 下載Windows的安裝包, 安裝一次</li>
<li>大功告成!</li>
</ol>


<p>對, 就是這樣</p>

<p>為什麼會有這樣的問題呢!?</p>

<p>起因就是在於, 新版和舊版的npm對於路徑的設定不同, 然後又不向下相容, 所以就會導致新的npm要去找某個路徑, 發現他找不到!?</p>

<p>舉個例子, 新版npm在安裝沒有安裝過的模組的時候, 需要 <code>超機車的耶</code> 這個套件, 然後npm發現cache裡面已經有 <code>超機車的耶</code> 這個套件, 但是這個 <code>超機車的耶</code> 這個套件是舊的npm裝的, 有些路徑設定在新版的npm沒有, 然後呢, 新版的npm就很高興的去 <code>超機車的耶</code> 這個cache裡面找他要的一些資訊&hellip;. 欸!!? 沒有找到!? 怎麼可能!!? 幹! 報錯給使用者了啦! 老子不爽裝了啦!!!</p>

<p>好的, 就是這樣, 這也是為什麼我們要把前朝的npm所遺留下來的cache清掉的原因&hellip;.</p>

<h2>提醒Windows用戶的注意事項</h2>

<p>所以呢, 總結一下經驗法則</p>

<ol>
<li><strong>他X的千萬不要在console中, 使用npm update -g</strong>, 你會死掉</li>
<li><strong>如果你不小心手癢了! 請照上述的最終解法重來一遍吧</strong></li>
</ol>


<p>OK, 附帶一提</p>

<h3>新版sails的問題</h3>

<p>當你把npm修好之後, 使用<code>npm install -g sails</code> 安裝成功</p>

<p>使用<code>sails new testProj</code></p>

<p>then <code>cd testProj</code></p>

<p>Run <code>sails lift</code></p>

<p>你會發現幹~ 怎麼不能RUN, 報錯呢!!! 靠杯</p>

<p>好的, 自力自強, 看error log, 是說找不到什麼洨的套件</p>

<p>就安裝他吧! 例如他靠杯說少了<code>基八毛</code>套件</p>

<p>那就是<code>npm install -g 基八毛</code></p>

<p>裝到Global安裝目錄去!</p>

<p>接著看<code>sails lift</code> 報什麼洨 她找不到的, 就通通滿足她!</p>

<p>裝飽之後~</p>

<p><code>sails lift</code> 就可以正常執行啦!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails練習之十四 - Hacker: 修改前端程式碼立馬變成Admin]]></title>
    <link href="http://kennytu.github.io/blog/2015/12/07/sails-study14/"/>
    <updated>2015-12-07T13:51:19+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/12/07/sails-study14</id>
    <content type="html"><![CDATA[<p>在之前的章節, Ira展示了如何區分管理者和一般使用者. 然而有些網友, 指出了一些漏洞, 讓我們可以直接修改前端程式碼, 就可以獲得管理者的權限.</p>

<p>影片在這邊: <a href="https://www.youtube.com/watch?v=TgiK34eDGOU" target="_blank">Building a Sails Application: Ep17a - Marshalling request parameters</a></p>

<p>好的, 主要的概念是這樣, 開啟瀏覽器, 使用一般使用者登入, 進入修改頁面(Edit), 然後用firefox的firebug開啟除錯模式, 將admin的checkbox加進去html裡面, 並且將checkbox勾選起來, 最後按下proceed!</p>

<p>你就會發現, 一般使用者突然間就會變成管理員嚕! 超High的!</p>

<!--more-->


<p>問題的發生點是在UserController.js的<code>update</code> action</p>

<p>我們在update的時候, 呼叫底下這一行</p>

<pre><code class="js  UserController.js的update">
 User.update(req.param('id'), req.params.all, function userUpdated(err)
</code></pre>

<p>其中第二個參數是取用所有來自req的參數, 所以這就讓我們可以使用insert admin的技巧來奪取管理員權限了</p>

<p>所以我們修改如下</p>

<pre><code class="js UserController.js update">
update: function (req, res, next) {
        if(values.admin != undefined &amp;&amp; values.admin.constructor === Array){
            if(values.admin[1] === 'on'){
                values.admin = true;
            }
        }

        var userObj = {
            name: req.param('name'),
            title: req.param('title'),
            email: req.param('email')
        }

        if(req.session.User.admin){
            userObj.admin = values.admin;
        }

        //replace req.params.all with userObj
        User.update(req.param('id'), userObj, function userUpdated(err) {
            if (err) {
                return res.redirect('/user/edit/' + req.param('id'));
            }

            res.redirect('/user/show/' + req.param('id'));
        });
    },
</code></pre>

<p>OK, 主要是我們去檢查這個Session的使用者是否一剛開始的Session就是Admin, 是的話我們才去設定Admin的屬性</p>

<p>除了Edit頁面, 我們要在Create的頁面也要設下檢查條件</p>

<pre><code class="js UserController.js create action">
create: function (req, res, next) {

        var userObj = {
            name: req.param('name'),
            title: req.param('title'),
            email: req.param('email'),
            password: req.param('password'),
            confirmation: req.param('confirmation')
        }

        //replce req.params.all with userObj
        User.create(userObj, function userCreated(err, user) {
            //if(err) return next(err);
            ...
</code></pre>

<p>存檔, 重新啟動sails, 大功告成啦~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails練習之十三 - 區分管理者和一般使用者]]></title>
    <link href="http://kennytu.github.io/blog/2015/12/04/sails-study13/"/>
    <updated>2015-12-04T19:57:17+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/12/04/sails-study13</id>
    <content type="html"><![CDATA[<p>本篇的Video在<a href="https://www.youtube.com/watch?v=DI85AWW_TEk" target="_blank">Building a Sails Application: Ep17 - Creating a distinction between admin and regular users.</a></p>

<p>這一章我在實作的時候遇到了很多問題, 尤其是前端使用者的Edit頁面, 將Admin打勾傳送到後端, 卻發生admin始終都是false的狀況.</p>

<p>看了網路上不少文章, 我把我自己的解法以及網路上的解法還有參考網站都列在本篇文章中</p>

<p>OK, 讓我們開始.</p>

<p>在<code>activeityOverload\api\models\User.js</code>新增<code>admin</code>的<code>attribute</code></p>

<!--more-->


<pre><code class="js User.js">
attributes: {
        name: {
            type: 'string',
            required: true
        },

        title: {
            type: 'string'
        },

        email: {
            type: 'email',
            required: true,
            unique: true
        },

        admin: {
            type: 'boolean',
            defaultsTo: false
        },

        encryptedPassword: {
            type: 'string'
        },

        toJSON: function () {
            var obj = this.toObject();
            delete obj.password;
            delete obj.confirmation;
            delete obj.encryptedPassword;
            delete obj._csrf;
            return obj;
        }
    },
</code></pre>

<p>注意到admin的defaultsTo是false, 你可以先設定為True, 然後執行sails先新增一個使用者, 讓他預設有admin的權限, 之後再改回來false.</p>

<p>接著到<code>SessionController.js</code>, 在<code>create</code>action中加入底下幾行</p>

<pre><code class="js SessionController.js">
// If the user is also an admin redirect to the user list (e.g. /views/user/index.ejs)
// This is used in conjunction with config/policies.js file
if (req.session.User.admin) {
    res.redirect('/user');
    return;
}

//Redirect to their profile page (e.g. /views/user/show.ejs)
res.redirect('/user/show/' + user.id);
</code></pre>

<p>然後, 在<code>activeityOverload\api\policies\</code>目錄下新增一個<code>admin.js</code>的policies, 內容如下</p>

<pre><code class="js admin.js">
/**
 * Allow any authenticated user.
 */
module.exports = function (req, res, ok) {

    // User is allowed, proceed to controller
    if (req.session.User &amp;&amp; req.session.User.admin) {
        return ok();
    }

    // User is not allowed
    else {
        var requireAdminError = [{name: 'requireAdminError', message: 'You must be an admin.'}]
        req.session.flash = {
            err: requireAdminError
        }
        res.redirect('/session/new');
        return;
    }
};
</code></pre>

<p>接著, 開啟<code>activeityOverload\config\policies.js</code>, 新增底下</p>

<pre><code class="js config\policies.js">
'*': 'flash',
    user:{
        'new': "flash",
        'create': "flash",
        '*': "admin"
    }
</code></pre>

<p>OK, 存檔, 從新啟動sails, 看看登入畫面. 登入的時候出現你需要是admin的權限才能進入, 這不是我們想要的</p>

<p>所以我們回頭再修改policy,</p>

<p>我們要在<code>activeityOverload\api\policies\</code>再新增一個<code>userCanSeeProfile.js</code>的Policy, 內容如下</p>

<pre><code class="js userCanSeeProfile.js">
/**
 * Allow a logged-in user to see, edit and update her own profile
 * Allow admins to see everyone
 */

module.exports = function (req, res, ok) {

    var sessionUserMatchesId = req.session.User.id === req.param('id');
    var isAdmin = req.session.User.admin;

    // The requested id does not match the user's id,
    // and this is not an admin
    if (!(sessionUserMatchesId || isAdmin)) {
        var noRightsError = [{name: 'noRights', message: 'You must be an admin.'}]
        req.session.flash = {
            err: noRightsError
        }
        res.redirect('/session/new');
        return;
    }

    ok();

};
</code></pre>

<p>回頭修改<code>activeityOverload\config\policies.js</code></p>

<pre><code class="js config\policies.js">
  '*': 'flash',
    user:{
        'new': "flash",
        'create': "flash",
        'show': "userCanSeeProfile",
        edit:   "userCanSeeProfile",
        update: "userCanSeeProfile",
        '*': "admin"
    }
</code></pre>

<p>存檔, 從新啟動sails, 應該就可以正常登入了</p>

<p>正常登陸之後, 我們會發現就算不是Admin的使用者也是可以看到頭導航欄的<code>User Administration</code>的按鈕, 我們想要修改一下</p>

<p>到layout.ejs,</p>

<pre><code class="js layout.ejs">
&lt;/head&gt;

  &lt;body&gt;

  &lt;div class="navbar navbar-inverse navbar-fixed-top"&gt;
      &lt;div class="container"&gt;
          &lt;div class="navbar-header"&gt;
              &lt;button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse"&gt;
                  &lt;span class="icon-bar"&gt;&lt;/span&gt;
                  &lt;span class="icon-bar"&gt;&lt;/span&gt;
                  &lt;span class="icon-bar"&gt;&lt;/span&gt;
              &lt;/button&gt;
              &lt;a class="navbar-brand" href="http://kennytu.github.io/"&gt; activityOverlord&lt;/a&gt;
          &lt;/div&gt;
          &lt;div class="navbar-collapse collapse"&gt;
              &lt;ul class="nav navbar-nav"&gt;
                  &lt;% if (session.authenticated) { %&gt;
                  &lt;li class="active"&gt;&lt;a href="http://kennytu.github.io/user/show/&lt;%= session.User.id %&gt;"&gt;&lt;%= session.User.name %&gt; &lt;/a&gt; &lt;/li&gt;
                  &lt;% } %&gt;
                  &lt;% if (session.authenticated &amp;&amp; session.User.admin) { %&gt;
                  &lt;li&gt;&lt;a href="http://kennytu.github.io/user"&gt;User Administration&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href="#"&gt;Placeholder2&lt;/a&gt;&lt;/li&gt;
                  &lt;% } %&gt;
              &lt;/ul&gt;
              &lt;div class="navbar-right"&gt;
                  &lt;% if (session.authenticated) { %&gt;
                  &lt;a class="btn btn-default navbar-btn navbar-right" href="http://kennytu.github.io/session/destroy"&gt;sign-out&lt;/a&gt;
                  &lt;% } %&gt;
              &lt;/div&gt;
              &lt;% if (!session.authenticated) { %&gt;
              &lt;form class="navbar-form navbar-right" action="/session/create"&gt;
                  &lt;div class="form-group"&gt;
                      &lt;input type="text" placeholder="Email" name="email" class="form-control"&gt;
                  &lt;/div&gt;
                  &lt;div class="form-group"&gt;
                      &lt;input type="password" placeholder="Password" name="password" class="form-control"&gt;
                  &lt;/div&gt;
                  &lt;button type="submit" class="btn btn-success"&gt;Sign in&lt;/button&gt;
                  &lt;input type="hidden" name="_csrf" value="&lt;%= _csrf %&gt;" /&gt;
              &lt;/form&gt;
              &lt;% } %&gt;
          &lt;/div&gt;
      &lt;/div&gt;
  &lt;/div&gt;

  &lt;%- body %&gt;

 ...
</code></pre>

<p>OK, 存檔, 從新啟動Sails, 就可以了.</p>

<p>好, 接下來, 我們要讓<code>http://localhost:1337/user</code>顯示的頁面有可愛的圖示來區分使用者是Admin還是Regular.</p>

<p>開啟<code>activeityOverload\views\user\index.ejs</code>, 新增以下程式碼</p>

<pre><code class="js views\user\index.ejs">
    ...

    &lt;td&gt;&lt;%= user.title %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= user.email %&gt;&lt;/td&gt;
    &lt;% if(user.admin) { % &gt;
        &lt;td&gt;&lt;img src="http://kennytu.github.io/images/admin.png"&gt;&lt;/td&gt;
    &lt;%} else  { % &gt;
        &lt;td&gt;&lt;img src="http://kennytu.github.io/images/pawn.png"&gt;&lt;/td&gt;
    &lt;%}%&gt;
    &lt;td&gt;&lt;a href="http://kennytu.github.io/user/show/&lt;%= user.id %&gt;" class="btn btn-sm btn-primary"&gt;Show&lt;/a&gt;&lt;/td&gt;

    ...
</code></pre>

<p>另外我們在<code>activeityOverload\views\user\show.ejs</code>也加入可愛的圖示</p>

<p>```js show.ejs</p>

<div class="container">
    <h1><%= user.name %></h1>
    <% if(user.admin) { %>
    <img src="http://kennytu.github.io/images/admin.png"> admin
    <% } else { %>
    <img src="http://kennytu.github.io/images/pawn.png"> pawm
    <% } %>
    <h3><%= user.title %></h3>
    <hr>
    <h3>contact: <%= user.email %></h3>

    <a class="btn btn-medium btn-primary" href="http://kennytu.github.io/user/edit/<%= user.id %>">Edit</a>

</div>


<pre><code>
OK, 接下來要進入本章需要修改的部分, 和本Video的程式碼不同

我們要修改edit.ejs, 讓edit的頁面有admin的check box可供使用者勾選
</code></pre>

<p><form action="/user/update/<%= user.id %>&ldquo; method="POST&rdquo; class=&ldquo;form-signin&rdquo;></p>

<pre><code>&lt;h2&gt; Hey, you're editing a user...&lt;/h2&gt;

&lt;input value="&lt;%= user.name %&gt;" name="name" type="text" class="form-control"/&gt;
&lt;input value="&lt;%= user.title %&gt;" name="title" type="text" class="form-control"/&gt;
&lt;input value="&lt;%= user.email %&gt;" name="email" type="text" class="form-control"/&gt;

&lt;% if (session.authenticated &amp;&amp; session.User.admin) { %&gt;
    &lt;% if (user.admin) { %&gt;
        &lt;input type="hidden" name="admin" value="checkAdmin"&gt;
        &lt;label class="checkbox"&gt;
            &lt;input type="checkbox" name="admin" checked&gt; Admin
        &lt;/label&gt;
    &lt;% } else { %&gt;
        &lt;input type="hidden" name="admin" value="checkAdmin"&gt;
        &lt;label class="checkbox"&gt;&lt;input type="checkbox" name="admin"&gt; Admin&lt;/label&gt;
    &lt;% } %&gt;
&lt;% } %&gt;

&lt;input type="submit" value="Proceed" class="btn btn-lg btn-primary btn-block"/&gt;
&lt;input type="hidden" name="_csrf" value="&lt;%= _csrf %&gt;"/&gt;
</code></pre>

<p></form></p>

<pre><code>
在這邊, 作者把 input type=hidden的name取名為admin, 而input type=checkbox的name也叫做admin

這會有個效果出現, 若使用者**沒有勾選**`checkbox`的話, 則這個form所丟出的update action, `admin`會是一個**只有名叫`checkAdmin`的字串物件**.

但若使用者**有勾選checkbox**的話, 則這個`admin`會是一個`Array`, 第一個是admin的value名稱(也就是checkAdmin), 第二個是checkbox的狀態**'on'**的字串.

##User.js的beforeValidation 改變

接著作者回來修改User.js, 他在程式碼中加入了beforeValidation的function,
這個是sails在對action動作的其中一個life cycle.

在新版本的Sails (我目前的Version為0.11.2), 已經沒有beforeValidation的function了. 名稱修改為`beforeValidate`, 其他的life cycle, 請參考官方網頁 &lt;a href="http://sailsjs.org/documentation/concepts/models-and-orm/lifecycle-callbacks" target="_blank"&gt;Lifecycle callbacks&lt;/a&gt;

在這邊, 作者在程式碼中加入了`beforeValidation`的function,先對`values.admin`做判斷, 理當`values.admin`所帶的值要不是**checkAdmin**的字串物件, 要不就是一個**陣列**(如前所述), 但我在這邊測試的結果, **新版的sails, 在beforeValidate中, values.admin永遠都會是false**!!

也就是說, 若我們要處理values.admin的這個值,若要確保是從網頁那邊過來的第一手原始資料的話, 我們必須從`activeityOverload\api\controllers\UserController.js`的`update`這個action就要開始處倆, 所以我將`User.js`的`beforeValidate`的判斷邏輯移到這邊(也就是將beforeValidate刪除), 底下是程式碼
</code></pre>

<p> update: function (req, res, next) {
        console.log(req.params.all());
        var values = req.allParams();
        console.log(values.admin);</p>

<pre><code>    if(values.admin != undefined &amp;&amp; values.admin.constructor === Array){
        if(values.admin[1] === 'on'){
            values.admin = true;
        }
    }
</code></pre>

<p>&hellip;</p>

<pre><code>
OK, 修改到這邊, 功能大概都完成了, 存檔, 重新啟動sails

就可以玩玩看admin user以及一般regular user的功能了!


##補充:關於Create第一個Admin User
除了上面講的, 在設定User.js的admin attribute的時候, 將defaultsTo: 設定為true, 新增一個admin使用者再改回false之外

還可以使用mongo-express, 進入資料庫, 然後修改user的檔案, 將admin: false 設定為true就可以了. 相當簡單

若沒有admin這個attribute, 就直接在資料庫當中新增一個admin: true, 就可以了!


##補充:關於beforeValidate的更正與修改

一些相關的討論請參考&lt;a href="http://irlnathan.github.io/sailscasts/blog/2013/09/05/building-a-sails-application-ep17-creating-a-distinction-between-admin-and-regular-users/" target="_blank"&gt;Building a Sails Application: Ep17 &lt;/a&gt;

其中有個網友他將解法寫在edit.js, 不用到後端去判斷, 方法如下

1. emove the 'beforeValidation' method from /api/models/User.js
2. add in /views/user/edit.ejs 以下的程式碼
</code></pre>

<p>&lt;% if(session.authenticated &amp;&amp; session.User.admin) { %>
    <input type="hidden" id="admin" name="admin" value="&lt;% user.admin ? 'true' : 'false' %&gt;">
    <label><input type="checkbox" <%="" user.admin="" ?="" 'checked':''="" %=""> onClick=&ldquo;document.getElementById(&lsquo;admin&rsquo;).value = this.checked;&rdquo;> Admin</label>
&lt;% } %></p>

<p>```
大致上就是說, 在前端的ejs就先將admin判斷好, 並且把admin設成true or false, 這樣就可以了.</p>

<h2>參考資料</h2>

<p><a href="http://stackoverflow.com/questions/767486/how-do-you-check-if-a-variable-is-an-array-in-javascript" target="_blank">How do you check if a variable is an array in JavaScript?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails練習之十二 - 改善User登入認證的導航介面]]></title>
    <link href="http://kennytu.github.io/blog/2015/12/04/sails-study12/"/>
    <updated>2015-12-04T14:34:16+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/12/04/sails-study12</id>
    <content type="html"><![CDATA[<p>本章主要是調整登入的外觀</p>

<p>課程連結是 <a href="https://www.youtube.com/watch?v=P0K36-c5G4A" target="_blank">Building a Sails Application: Ep15 - Improving user authenticated navigation.</a></p>

<p>主要是修改<code>activeityOverload\views\layout.ejs</code></p>

<p>在原本<code>&lt;%- body %&gt;</code>的上方, 有個簡單的頭導航介面, 把它換成如下的程式碼</p>

<!--more-->


<pre><code class="html layout.ejs">
...

&lt;body&gt;

  &lt;div class="navbar navbar-inverse navbar-fixed-top"&gt;
      &lt;div class="container"&gt;
          &lt;div class="navbar-header"&gt;
              &lt;button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse"&gt;
                  &lt;span class="icon-bar"&gt;&lt;/span&gt;
                  &lt;span class="icon-bar"&gt;&lt;/span&gt;
                  &lt;span class="icon-bar"&gt;&lt;/span&gt;
              &lt;/button&gt;
              &lt;a class="navbar-brand" href="http://kennytu.github.io/"&gt; activityOverlord&lt;/a&gt;
          &lt;/div&gt;
          &lt;div class="navbar-collapse collapse"&gt;
              &lt;ul class="nav navbar-nav"&gt;
                  &lt;% if (session.authenticated) { %&gt;
                  &lt;li class="active"&gt;&lt;a href="http://kennytu.github.io/user/show/&lt;%= session.User.id %&gt;"&gt;&lt;%= session.User.name %&gt; &lt;/a&gt; &lt;/li&gt;
                  &lt;% } %&gt;
                  &lt;% if (session.authenticated &amp;&amp; session.User.admin) { %&gt;
                  &lt;li&gt;&lt;a href="http://kennytu.github.io/user"&gt;User Administration&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href="#"&gt;Placeholder2&lt;/a&gt;&lt;/li&gt;
                  &lt;% } %&gt;
              &lt;/ul&gt;
              &lt;div class="navbar-right"&gt;
                  &lt;% if (session.authenticated) { %&gt;
                  &lt;a class="btn btn-default navbar-btn navbar-right" href="http://kennytu.github.io/session/destroy"&gt;sign-out&lt;/a&gt;
                  &lt;% } %&gt;
              &lt;/div&gt;
              &lt;% if (!session.authenticated) { %&gt;
              &lt;form class="navbar-form navbar-right" action="/session/create"&gt;
                  &lt;div class="form-group"&gt;
                      &lt;input type="text" placeholder="Email" name="email" class="form-control"&gt;
                  &lt;/div&gt;
                  &lt;div class="form-group"&gt;
                      &lt;input type="password" placeholder="Password" name="password" class="form-control"&gt;
                  &lt;/div&gt;
                  &lt;button type="submit" class="btn btn-success"&gt;Sign in&lt;/button&gt;
                  &lt;input type="hidden" name="_csrf" value="&lt;%= _csrf %&gt;" /&gt;
              &lt;/form&gt;
              &lt;% } %&gt;
          &lt;/div&gt;
      &lt;/div&gt;
  &lt;/div&gt;

  &lt;%- body %&gt;
    ...
</code></pre>

<p>也可以參考作者的<a href="https://github.com/irlnathan/activityoverlord/blob/master/views/layout.ejs" target="_blank">GitHub</a>, 直接把程式碼copy過來貼到你現在的專案就可以了</p>

<p>存檔之後, 重新啟動sails, 就可以看到修改過精美的導航介面了</p>

<p>至於解說的部分, 請看作者在影片中的講解嚕!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js更新問題]]></title>
    <link href="http://kennytu.github.io/blog/2015/12/03/nodejs-update/"/>
    <updated>2015-12-03T19:31:51+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/12/03/nodejs-update</id>
    <content type="html"><![CDATA[<p>在更新<code>node.js</code>以及<code>npm</code>之後 (npm現在被包在node.js裡面一起安裝)</p>

<p>我執行npm -g update, global有更新的node.js的module都update到最新的</p>

<p>接著我切換到我這一陣子再用的sails的專案, 執行sails lift的時候</p>

<p>發生了<code>Cannot find module 'lru-cache'</code> 這個事件</p>

<!--more-->


<p>解決的方法是, 執行以下的指令</p>

<pre><code>rm -rf node_modules
npm cache clean
npm install
</code></pre>

<p>先將sails專案裡面的node_modules刪除, 然後清空Cache, 接著重新安裝一次, 這樣Sails就可以正常運行了</p>

<p>另外, 在執行sails lift的時候, 若sails的資料庫有綁定mongo db, 但你還沒有啟動mondo db時, 會出現以下訊息</p>

<pre><code class="batch">
error: A hook (`orm`) failed to load!
E:\sails_app\activeityOverload\node_modules\mongodb\lib\server.js:235
        process.nextTick(function() { throw err; })
                                      ^

TypeError: Cannot read property 'close' of undefined
    at E:\sails_app\activeityOverload\node_modules\sails-mongo\lib\adapter.js:138:13
    at E:\sails_app\activeityOverload\node_modules\sails-mongo\node_modules\async\lib\async.js:187:20
    at E:\sails_app\activeityOverload\node_modules\sails-mongo\node_modules\async\lib\async.js:239:13
    at _arrayEach (E:\sails_app\activeityOverload\node_modules\sails-mongo\node_modules\async\lib\async.js:91:13)
    at _each (E:\sails_app\activeityOverload\node_modules\sails-mongo\node_modules\async\lib\async.js:82:13)
</code></pre>

<p>這就表示sails 掛不到 mongo db, 只要先啟動mongo db, 然後再啟動sails lift就沒問題了!</p>
]]></content>
  </entry>
  
</feed>
