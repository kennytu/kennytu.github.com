<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sails | 江湖險惡，我從來都不輕易留下我的姓名。]]></title>
  <link href="http://kennytu.github.io/blog/categories/sails/atom.xml" rel="self"/>
  <link href="http://kennytu.github.io/"/>
  <updated>2015-12-03T19:44:04+08:00</updated>
  <id>http://kennytu.github.io/</id>
  <author>
    <name><![CDATA[Kenny Tu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sails練習之十一 - 使用者認證以及嚴格存取]]></title>
    <link href="http://kennytu.github.io/blog/2015/12/03/sails-study11/"/>
    <updated>2015-12-03T18:16:13+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/12/03/sails-study11</id>
    <content type="html"><![CDATA[<p>本章的Video為 <a href="https://www.youtube.com/watch?v=AooPVuYGnuU" target="_blank">Ep14 - User authentication and restricting access through policies.</a></p>

<p>首先,我們要先將前一章的Session的練習的程式碼先拿掉,</p>

<p>接著修改<code>SessionController.js</code>, 新增<code>create action</code></p>

<!--more-->


<pre><code class="js SessionController.js 新增Create action">
var bcrypt = require('bcrypt');

module.exports = {
    'new': function(req, res) {
        res.view('session/new');
    },
    create: function(req, res, next) {

        // Check for email and password in params sent via the form, if none
        // redirect the browser back to the sign-in form.
        if (!req.param('email') || !req.param('password')) {
            // return next({err: ["Password doesn't match password confirmation."]});

            var usernamePasswordRequiredError = [{
                name: 'usernamePasswordRequired',
                message: 'You must enter both a username and password.'
            }]

            // Remember that err is the object being passed down (a.k.a. flash.err), whose value is another object with
            // the key of usernamePasswordRequiredError
            req.session.flash = {
                err: usernamePasswordRequiredError
            }

            res.redirect('/session/new');
            return;
        }

        // Try to find the user by there email address.
        // findOneByEmail() is a dynamic finder in that it searches the model by a particular attribute.
        // User.findOneByEmail(req.param('email')).done(function(err, user) {
        User.findOneByEmail(req.param('email'), function foundUser(err, user) {
            if (err) return next(err);

            // If no user is found...
            if (!user) {
                var noAccountError = [{
                    name: 'noAccount',
                    message: 'The email address ' + req.param('email') + ' not found.'
                }]
                req.session.flash = {
                    err: noAccountError
                }
                res.redirect('/session/new');
                return;
            }

            // Compare password from the form params to the encrypted password of the user found.
            bcrypt.compare(req.param('password'), user.encryptedPassword, function(err, valid) {
                if (err) return next(err);

                // If the password from the form doesn't match the password from the database...
                if (!valid) {
                    var usernamePasswordMismatchError = [{
                        name: 'usernamePasswordMismatch',
                        message: 'Invalid username and password combination.'
                    }]
                    req.session.flash = {
                        err: usernamePasswordMismatchError
                    }
                    res.redirect('/session/new');
                    return;
                }

                // Log user in
                req.session.authenticated = true;
                req.session.User = user;

                // Change status to online
                user.online = true;
                user.save(function(err, user) {
                    if (err) return next(err);

                    // Inform other sockets (e.g. connected sockets that are subscribed) that this user is now logged in
                    User.publishUpdate(user.id, {
                        loggedIn: true,
                        id: user.id,
                        name: user.name,
                        action: ' has logged in.'
                    });

                    // If the user is also an admin redirect to the user list (e.g. /views/user/index.ejs)
                    // This is used in conjunction with config/policies.js file
                    if (req.session.User.admin) {
                        res.redirect('/user');
                        return;
                    }

                    //Redirect to their profile page (e.g. /views/user/show.ejs)
                    res.redirect('/user/show/' + user.id);
                });
            });
        });
    }

};
</code></pre>

<p>新增完成之後, 重新啟動sails, (<strong>記得啟動sails之前要先啟動Mongo DB</strong>), 然後試試看功能</p>

<p>到瀏覽器輸入<code>http://localhost:1337/session/new</code></p>

<p>然後輸入不正確的帳號密碼以及正確的帳號密碼試試看, 應該就沒問題嚕</p>

<p>另外, 關於Create的每一個判斷式, 就請參考Irl nathan本人的講解嚕</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails練習之十 - Session]]></title>
    <link href="http://kennytu.github.io/blog/2015/12/02/sails-study10/"/>
    <updated>2015-12-02T17:07:35+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/12/02/sails-study10</id>
    <content type="html"><![CDATA[<p>本篇進展到這邊, 主要是提到Session的使用, 影片是<a href="https://www.youtube.com/watch?v=SY2AcAHxIiU" target="_blank">Building a Sails Application: Ep13 - Sign-in page, session controller, new action, and sessions.</a></p>

<p>首先, 在<code>views/</code>新增一個目錄名叫<code>session</code>, 在<code>session</code>裡面新增一個ejs檔案名為<code>new.ejs</code></p>

<pre><code class="js activeityOverload\views\session\new.ejs">
&lt;form action="/session/create" method="POST" class="form-signin"&gt;
    &lt;h2 class="form-signin-heading"&gt;Please sign in...&lt;/h2&gt;

    &lt;% if(flash &amp;&amp; flash.err) { %&gt;
        &lt;ul class="alert alert-success"&gt;
    &lt;% Object.keys(flash.err).forEach(function(error) { %&gt;
        &lt;li&gt;&lt;%- JSON.stringify(flash.err[error]) %&gt;&lt;/li&gt;
    &lt;% }) %&gt;
    &lt;/ul&gt;
    &lt;% } %&gt;

    &lt;input type="text" class="form-control" placeholder="Email address" name="email"&gt;
    &lt;input type="password" class="form-control" placeholder="Password" name="password"&gt;
    &lt;input type="submit" class="btn btn-lg btn-primary btn-block" value="Sign-in"/&gt;
    &lt;input type="hidden" name="_csrf" value="&lt;%= _csrf %&gt;" /&gt;

&lt;/form&gt;
</code></pre>

<!--more-->


<p>存檔之後, 到專案目錄底下開啟command line tool, 然後輸入<code>sails generate controller session</code></p>

<p>接著sails就會產生<code>activeityOverload\api\controllers\SessionController.js</code>這個檔案</p>

<p>我們到<code>SessionController.js</code>新增程式碼</p>

<pre><code class="js SessionController.js">
module.exports = {
    'new': function(req, res) {
        var oldDataObj = new Date();
        var newDateObj = new Date(oldDataObj.getTime() + 60000);
        req.session.cookie.expires = newDateObj;
        req.session.authenticated = true;
        console.log(req.session);
        res.view('session/new');
    }

};
</code></pre>

<p>然後到<code>activeityOverload\api\controllers\UserController.js</code></p>

<p>在<code>index</code>的<code>action</code>新增兩行Debug message, 如下</p>

<pre><code class="js UserController.js">
index: function (req, res, next) {
        console.log(new Date());
        console.log(req.session.authenticated);

        //Get an array of all users in the User collection(e.g. table)
        User.find(function foundUsers(err, users) {
            if (err) return (err);
            //pass the array down to the /views/index.ejs page
            res.view({
                users: users
            });
        });
    },
</code></pre>

<p>新增完成之後, 我們重新啟動sails,</p>

<p>先在瀏覽器中輸入<code>http://localhost:1337/session/new</code></p>

<p>然後在sails的console畫面中可以看到以下畫面</p>

<pre><code class="js">
Session {
  cookie:
   { path: '/',
     _expires: Wed Dec 02 2015 17:31:50 GMT+0800 (台北標準時間),
     originalMaxAge: 60000,
     httpOnly: true },
  csrfSecret: 'paEKhxeTpDC5hQqu_ns64Ufi',
  authenticated: true }
</code></pre>

<p>我們觀察到authenticated還是為true</p>

<p>接著, 我們要來觀察<code>req.session.cookie.expires</code>設定之後的結果, 我們是設定成60秒,</p>

<p>開啟瀏覽器, 輸入<code>http://localhost:1337/user</code>,然後觀察後台的輸出</p>

<p>會像是這樣</p>

<pre><code class="batch">
Wed Dec 02 2015 17:31:04 GMT+0800 (台北標準時間)
true
Wed Dec 02 2015 17:31:34 GMT+0800 (台北標準時間)
true
Wed Dec 02 2015 17:31:39 GMT+0800 (台北標準時間)
true
Wed Dec 02 2015 17:31:59 GMT+0800 (台北標準時間)
undefined  &lt;- 60秒之後, authenticated會變為undefined!
</code></pre>

<p>以上就是session的實驗囉!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails練習之九-加密]]></title>
    <link href="http://kennytu.github.io/blog/2015/12/01/sails-study09/"/>
    <updated>2015-12-01T17:39:08+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/12/01/sails-study09</id>
    <content type="html"><![CDATA[<p>OK, 上課的影片是: <a href="https://www.youtube.com/watch?v=1wziI6l0NyE" target="_blank">Building a Sails Application: Ep11 - Encrypting passwords with bcrypt.</a></p>

<p>到<a href="https://www.npmjs.com/package/bcrypt" target="_blank">Bcrypt</a>看一下相關的資訊</p>

<p>安裝的步驟如下</p>

<p>到專案目錄, 執行<code>npm install bcrypt --save</code></p>

<p>加上<code>--save</code>的意思是除了install bcrypt到專案底下之外, 也把相依性設定寫入package.json, 這樣以後如果有人想要直接使用這個專案, 在目錄底下輸入npm install, 就可以將此專案需要用到的packages一次設定完成!</p>

<p>另外安裝<code>bcrypt</code>需要Visual Studio 2013的支援, 若你的Visual Studio版本大於2013, 請在安裝的時候再加入<code>--msvs_version=2013</code></p>

<p>也就是<code>npm install bcrypt --save --msvs_version=2013</code></p>

<!--more-->


<p>OK, 安裝順利的話, 會出現如下的訊息</p>

<pre><code class="batch">
E:\sails_app\activeityOverload&gt;npm install bcrypt --save
-
&gt; bcrypt@0.8.5 install E:\sails_app\activeityOverload\node_modules\bcrypt
&gt; node-gyp rebuild


E:\sails_app\activeityOverload\node_modules\bcrypt&gt;if not defined npm_config_node_gyp (node "C:\Program Files\nodejs\node_modules\npm\bin\node-gyp-bin\\..\..\node_modules\node-gyp\bin\node-gyp.js" rebuild )  else (node  rebuild )

在這個方案中一次建置一個專案。若要啟用平行組建，請加入 "/m" 參數。 (Visual Studio 2013 C++ Support)
  blowfish.cc
  bcrypt.cc
..\src\bcrypt.cc(232): warning C4267: '=' : conversion from 'size_t' to 'unsigned char', possible loss of data 
[E:\sails_app\activeityOverload\node_modules\bcrypt\build\bcrypt_lib.vcxproj]  bcrypt_node.cc ..\src\bcrypt_node.cc(76): warning C4244: 'argument' : conversion from 'ssize_t' to 'unsigned char', possible loss  of data 

[E:\sails_app\activeityOverload\node_modules\bcrypt\build\bcrypt_lib.vcxproj]
..\src\bcrypt_node.cc(135): warning C4244: 'argument' : conversion from 'const ssize_t' to 'unsigned char', possible loss of data 

[E:\sails_app\activeityOverload\node_modules\bcrypt\build\bcrypt_lib.vcxproj]
..\src\bcrypt_node.cc(229): warning C4267: 'initializing' : conversion from 'size_t' to 'int', possible loss of data 

[E:\sails_app\activeityOverload\node_modules\bcrypt\build\bcrypt_lib.vcxproj]
..\src\bcrypt_node.cc(230): warning C4267: 'initializing' : conversion from 'size_t' to 'int', possible loss of data 

[E:\sails_app\activeityOverload\node_modules\bcrypt\build\bcrypt_lib.vcxproj]
win_delay_load_hook.c

Creating library E:\sails_app\activeityOverload\node_modules\bcrypt\build\Release\bcrypt_lib.lib and 
object E:\sails_app\activeityOverload\node_modules\bcrypt\build\Release\bcrypt_lib.exp
  Generating code
  Finished generating code
  bcrypt_lib.vcxproj -&gt; E:\sails_app\activeityOverload\node_modules\bcrypt\build\Release\\bcrypt_lib.node

bcrypt@0.8.5 node_modules\bcrypt
├── bindings@1.2.1
└── nan@2.0.5
</code></pre>

<p>裝完之後, 接著我們修改<code>activeityOverload\api\models\</code>底下的<code>User.js</code></p>

<pre><code class="js User.js 新增beforeCreate Function">
module.exports = {

  schema: true,

  attributes: {...},

  beforeCreate: function (values, next) {

    // This checks to make sure the password and password confirmation match before creating record
    if (!values.password || values.password != values.confirmation) {
      return next({err: ["Password doesn't match password confirmation."]});
    }

    require('bcrypt').hash(values.password, 10, function passwordEncrypted(err, encryptedPassword) {
      if (err) return next(err);
      values.encryptedPassword = encryptedPassword;
      // values.online= true;
      next();
    });
  }
};
</code></pre>

<p>新增完成之後, 重啟sails, (啟動sails之前記得要先啟動mongo db)</p>

<p>接著新增一名使用者看看, 新增完成之後, 使用<code>mongo-express</code>登入進去mongo db的後台去看, 我們的新的使用者是不是有已經加密過的密碼了!</p>

<p>好的, 大致上是這樣嚕</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails練習之八-連結資料庫]]></title>
    <link href="http://kennytu.github.io/blog/2015/11/26/sails-study08/"/>
    <updated>2015-11-26T17:56:17+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/11/26/sails-study08</id>
    <content type="html"><![CDATA[<p>各位客官, 終於到了要使用到資料庫的時機了</p>

<p>本章節, Irl nathan介紹了Mongo Db的使用, 以及如何新增Mongo Db到我們的sails專案.</p>

<p>不過因為我現在用的sails是0.11.x的版本, 而Irl兄是0.9.x之前的, 所以一些設定上面都有些不同</p>

<p>Irl老兄的影片連結在這:<a href="https://www.youtube.com/watch?v=G4-fm_h8z-0" target="_blank">Building a Sails Application: Ep10 - Changing databases to mongoDB with sails adapters.</a></p>

<p>我在這邊主要以新版的sails為主. 底下介紹安裝方法</p>

<!--more-->


<p>首先, 進去sails的專案, 例如在<code>E:\sails_app\activeityOverload&gt;</code> 輸入</p>

<p><code>npm install sails-mongo --save</code></p>

<p>接著<code>npm</code>會下載<code>mongo</code>的程式碼, 若在windows系統, 會預設使用<code>visual studio</code>的C++來compiler,</p>

<p>這邊要注意, sails-mongo在windows系統下, <strong>預設使用visual studio 2013的版本編譯, 若比2013的版本低, 會發生編譯錯誤. 而若版本比2013高, 則需要額外的輸入條件</strong>, 底下舉例</p>

<p>版本是visual studio 2013</p>

<p><code>npm install sails-mongo --save</code></p>

<p>版本若是<strong>大於</strong>visual studio 2013, 則需要輸入</p>

<p><code>npm install sails-mongo --save --msvs_version=2013</code></p>

<p>PS. 大於Visual Studio 2013的版本我還沒試過</p>

<p>若還有任何問題, 請在google輸入<code>node-gyp v8.h syntax error</code>這幾個關鍵字, 應該有些線索你可以嘗試看看</p>

<p>好的, 基本上只要注意到這些, 應該就沒問題, Mongo Db就順利裝上去了</p>

<p>接下來要設定Sails專案的Mongo Db的檔案</p>

<p>修改兩個檔案, 一個是<code>connection.js</code>,</p>

<pre><code class="js config\connections.js 修改someMongodbServer">
 /***************************************************************************
  *                                                                          *
  * MongoDB is the leading NoSQL database.                                   *
  * http://en.wikipedia.org/wiki/MongoDB                                     *
  *                                                                          *
  * Run: npm install sails-mongo                                             *
  *                                                                          *
  ***************************************************************************/
  someMongodbServer: {
    adapter: 'sails-mongo',
    host: 'localhost',
    port: 27017,
    user: '',
    password: '',
    database: 'activityoverlord'
  },
</code></pre>

<p>另一個是<code>models.js</code></p>

<pre><code class="js config\models.js 修改connection">
module.exports.models = {

  /***************************************************************************
  *                                                                          *
  * Your app's default connection. i.e. the name of one of your app's        *
  * connections (see `config/connections.js`)                                *
  *                                                                          *
  ***************************************************************************/
  // connection: 'localDiskDb',
  connection: 'someMongodbServer',
  autoCreatedAt: true,
  autoUpdatedAt: true,
  /***************************************************************************
  *                                                                          *
  * How and whether Sails will attempt to automatically rebuild the          *
  * tables/collections/etc. in your schema.                                  *
  *                                                                          *
  * See http://sailsjs.org/#!/documentation/concepts/ORM/model-settings.html  *
  *                                                                          *
  ***************************************************************************/
   migrate: 'safe'

};
</code></pre>

<p>設定好之後, 存檔.</p>

<p>最後我們來安裝Mongo DB, 因為Irl nathan是在Mac OS上面已經裝好, 直接執行就可以了, 我們要在Win7上面裝MongoDB.</p>

<p>開啟<code>cmd</code></p>

<p>輸入 <code>wmic os get caption</code> 確認 作業系統版本</p>

<p>輸入 <code>wmic os get osarchitecture</code> 確認是幾位元的作業系統</p>

<p>確定完之後,到<a href="https://www.mongodb.org/downloads" target="_blank">MongoDb</a>下載相對應的版本.</p>

<p>例如我的作業系統是<code>Win7 64bits</code>, 那就下載<code>Windows 64-bit 2008 R2+</code>.</p>

<p>下載完成, 安裝, 請選Custom, 將安裝路徑裝到<code>C:\MongoDB</code>底下,我是裝到<code>D:\MongoDB</code>,</p>

<p>因為MongoDB預設會裝到C:\Program Files&hellip;巴拉巴拉, 太長了, 往後輸入指令不方便, 所以就縮短裝到比較方便找的目錄.</p>

<p>裝完之後, 在MongoDB安裝的那個磁碟區, 例如我裝在D槽, 打開cmd, 輸入<code>md \data\db</code>, 這會在<code>D:\</code>產生<code>data\db</code>的資料夾, 而這個資料夾是<strong>MongoDB預設會存取的資料夾</strong>.</p>

<p>OK, 接下來使用<code>cmd</code>切換到<code>MongoDB</code>的安裝路徑底下的<code>bin</code>目錄,輸入<code>mongod.exe</code>, <code>MongoDb</code>就啟動啦!</p>

<p>PS: 若你沒有Create \data\db, 那麼你執行<code>mongod.exe</code>就會發生錯誤</p>

<p>若你想要指定其他的資料庫存取目錄, 請在輸入<code>mongod.exe</code>的同時, 加入<code>--dbpath</code>, 例如</p>

<p><code>D:\MongoDB\bin&gt;mongod.exe --dbpath=D:\MongoDB\data</code></p>

<p>這樣就可以了!</p>

<p>以上安裝MongoDb的教學, 可參考以下網站</p>

<p><a href="http://blog.gtwang.org/windows/windows-install-mongodb-database/" target="_blank">在 Windows 中安裝 MongoDB 資料庫</a></p>

<p><a href="http://fecbob.pixnet.net/blog/post/38494357-mongodb%E5%9C%A8windows%E4%B8%8B%E5%AE%89%E8%A3%9D%E9%85%8D%E7%BD%AE" target="_blank">MongoDB 在 Windows 下安裝配置</a></p>

<p><a href="http://www.runoob.com/mongodb/mongodb-window-install.html" target="_blank">window 平台安装 MongoDB</a></p>

<p>好, 啟動MongoDb之後, 我們就可以切回來Sails專案了</p>

<p>我們重啟Sails, 指令<code>sails lift</code></p>

<p>接下來我們在瀏覽器輸入<code>http://localhost:1337</code>, 新增使用者</p>

<p>成功之後, 你會發現使用者已經被新增到MongoDb裡面去了, 試一下其他功能如修改, 應該都能正常運作!</p>

<p>今天就上到這邊啦! 下課~~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails練習之七]]></title>
    <link href="http://kennytu.github.io/blog/2015/11/26/sails-study07/"/>
    <updated>2015-11-26T10:34:50+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/11/26/sails-study07</id>
    <content type="html"><![CDATA[<p>本章緊接著前一篇, 我們要來實作Delete的功能</p>

<p>這篇參考此Youtube:<a href="https://www.youtube.com/watch?v=6sIrHPlJJQk" target="_blank">Building a Sails Application: Ep9 - Deleting a user account.</a></p>

<p>我們到<code>UserController.js</code>去新增我們的delete程式碼</p>

<pre><code class="js UserController.js 新增 destroy function">
  destroy: function(req, res, next){
    console.log("Hi, destroy");
    User.findOne(req.param('id'), function foundUser(err, user){
      if (err) return next(err);
      if(!user) return next('User doesn\'t exist.');

      User.destroy(req.param('id'), function userDestroyed(err) {
        if(err) return next(err);
      });

      res.redirect('/user');

  });
</code></pre>

<!--more-->


<p>我們注意到<code>if(!user) return next('User doesn\'t exist.');</code></p>

<p>我們也把這一段敘述加到<code>edit action</code>裡面</p>

<pre><code class="js UserController.js 修改 edit action">
edit: function(req, res, next){
    console.log("hi, edit!");

    //Find the user from the id passed in via params
    User.findOne(req.param('id'), function foundUser(err, user){
      if(err) return next(err);
      if(!user) return next('User doesn\'t exist.');

      res.view({
        user: user
      });
    });
},
</code></pre>

<p>然後我們回到<code>views\user\index.ejs</code>, 加入以下程式碼</p>

<p>```html views\user\index.ejs 加入destroy (使用POST方法)</p>

<div class="container">
  <h3>Users</h3>
  <table class="table">
    <tr>
      <th>ID</th>
      <th>Name</th>
      <th>Title</th>
      <th>Email</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>

    <% _.each(users, function(user){ %>
    <tr data-id="<%= user.id %>" data-model="user">
      <td><%= user.id %></td>
      <td><%= user.name %></td>
      <td><%= user.title%></td>
      <td><%= user.email%></td>
      <td><a href="http://kennytu.github.io/user/show/<%= user.id %>" class="btn btn-sm btn-primary">Show</a></td>
      <td><a href="http://kennytu.github.io/user/edit/<%= user.id %>" class="btn btn-sm btn-warning">Edit</a></td>

      <td>
        <form action="/user/destroy/<%= user.id%>" method="POST">
          <input type="hidden" name="_method" value="delete"/>
          <input type="submit" class="btn btn-sm btn-danger" value="Delete"/>
          <input type="hidden" name="_csrf" value="<%= _csrf %>"/>
        </form>
      </td>
    </tr>

    <%}) %>
  </table>
</div>


<p>```</p>

<p>注意到我們對<code>destroy</code>使用<code>POST</code>方法, 其他的<code>action</code>我們是用<code>GET</code>方法</p>

<p>由於我們的destroy是用另外一個form, 所以我們要在新增一個hidden的_csrf, 否則我們會沒有辦法access網頁</p>

<p>好, 完成之後, 存檔, 重啟sails</p>

<p>瀏覽器輸入<code>http://localhost:1337/user</code></p>

<p>就可以玩玩看delete的功能了!</p>
]]></content>
  </entry>
  
</feed>
