<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sails | 江湖險惡，我從來都不輕易留下我的姓名。]]></title>
  <link href="http://kennytu.github.io/blog/categories/sails/atom.xml" rel="self"/>
  <link href="http://kennytu.github.io/"/>
  <updated>2015-11-27T21:31:34+08:00</updated>
  <id>http://kennytu.github.io/</id>
  <author>
    <name><![CDATA[Kenny Tu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sails練習之八-連結資料庫]]></title>
    <link href="http://kennytu.github.io/blog/2015/11/26/sails-study08/"/>
    <updated>2015-11-26T17:56:17+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/11/26/sails-study08</id>
    <content type="html"><![CDATA[<p>各位客官, 終於到了要使用到資料庫的時機了</p>

<p>本章節, Irl nathan介紹了Mongo Db的使用, 以及如何新增Mongo Db到我們的sails專案.</p>

<p>不過因為我現在用的sails是0.11.x的版本, 而Irl兄是0.9.x之前的, 所以一些設定上面都有些不同</p>

<p>Irl老兄的影片連結在這:<a href="https://www.youtube.com/watch?v=G4-fm_h8z-0" target="_blank">Building a Sails Application: Ep10 - Changing databases to mongoDB with sails adapters.</a></p>

<p>我在這邊主要以新版的sails為主. 底下介紹安裝方法</p>

<!--more-->


<p>首先, 進去sails的專案, 例如在<code>E:\sails_app\activeityOverload&gt;</code> 輸入</p>

<p><code>npm install sails-mongo --save</code></p>

<p>接著<code>npm</code>會下載<code>mongo</code>的程式碼, 若在windows系統, 會預設使用<code>visual studio</code>的C++來compiler,</p>

<p>這邊要注意, sails-mongo在windows系統下, <strong>預設使用visual studio 2013的版本編譯, 若比2013的版本低, 會發生編譯錯誤. 而若版本比2013高, 則需要額外的輸入條件</strong>, 底下舉例</p>

<p>版本是visual studio 2013</p>

<p><code>npm install sails-mongo --save</code></p>

<p>版本若是<strong>大於</strong>visual studio 2013, 則需要輸入</p>

<p><code>npm install sails-mongo --save --msvs_version=2013</code></p>

<p>PS. 大於Visual Studio 2013的版本我還沒試過</p>

<p>若還有任何問題, 請在google輸入<code>node-gyp v8.h syntax error</code>這幾個關鍵字, 應該有些線索你可以嘗試看看</p>

<p>好的, 基本上只要注意到這些, 應該就沒問題, Mongo Db就順利裝上去了</p>

<p>接下來要設定Sails專案的Mongo Db的檔案</p>

<p>修改兩個檔案, 一個是<code>connection.js</code>,</p>

<pre><code class="js config\connections.js 修改someMongodbServer">
 /***************************************************************************
  *                                                                          *
  * MongoDB is the leading NoSQL database.                                   *
  * http://en.wikipedia.org/wiki/MongoDB                                     *
  *                                                                          *
  * Run: npm install sails-mongo                                             *
  *                                                                          *
  ***************************************************************************/
  someMongodbServer: {
    adapter: 'sails-mongo',
    host: 'localhost',
    port: 27017,
    user: '',
    password: '',
    database: 'activityoverlord'
  },
</code></pre>

<p>另一個是<code>models.js</code></p>

<pre><code class="js config\models.js 修改connection">
module.exports.models = {

  /***************************************************************************
  *                                                                          *
  * Your app's default connection. i.e. the name of one of your app's        *
  * connections (see `config/connections.js`)                                *
  *                                                                          *
  ***************************************************************************/
  // connection: 'localDiskDb',
  connection: 'someMongodbServer',
  autoCreatedAt: true,
  autoUpdatedAt: true,
  /***************************************************************************
  *                                                                          *
  * How and whether Sails will attempt to automatically rebuild the          *
  * tables/collections/etc. in your schema.                                  *
  *                                                                          *
  * See http://sailsjs.org/#!/documentation/concepts/ORM/model-settings.html  *
  *                                                                          *
  ***************************************************************************/
   migrate: 'safe'

};
</code></pre>

<p>設定好之後, 存檔.</p>

<p>最後我們來安裝Mongo DB, 因為Irl nathan是在Mac OS上面已經裝好, 直接執行就可以了, 我們要在Win7上面裝MongoDB.</p>

<p>開啟<code>cmd</code></p>

<p>輸入 <code>wmic os get caption</code> 確認 作業系統版本</p>

<p>輸入 <code>wmic os get osarchitecture</code> 確認是幾位元的作業系統</p>

<p>確定完之後,到<a href="https://www.mongodb.org/downloads" target="_blank">MongoDb</a>下載相對應的版本.</p>

<p>例如我的作業系統是<code>Win7 64bits</code>, 那就下載<code>Windows 64-bit 2008 R2+</code>.</p>

<p>下載完成, 安裝, 請選Custom, 將安裝路徑裝到<code>C:\MongoDB</code>底下,我是裝到<code>D:\MongoDB</code>,</p>

<p>因為MongoDB預設會裝到C:\Program Files&hellip;巴拉巴拉, 太長了, 往後輸入指令不方便, 所以就縮短裝到比較方便找的目錄.</p>

<p>裝完之後, 在MongoDB安裝的那個磁碟區, 例如我裝在D槽, 打開cmd, 輸入<code>md \data\db</code>, 這會在<code>D:\</code>產生<code>data\db</code>的資料夾, 而這個資料夾是<strong>MongoDB預設會存取的資料夾</strong>.</p>

<p>OK, 接下來使用<code>cmd</code>切換到<code>MongoDB</code>的安裝路徑底下的<code>bin</code>目錄,輸入<code>mongod.exe</code>, <code>MongoDb</code>就啟動啦!</p>

<p>PS: 若你沒有Create \data\db, 那麼你執行<code>mongod.exe</code>就會發生錯誤</p>

<p>若你想要指定其他的資料庫存取目錄, 請在輸入<code>mongod.exe</code>的同時, 加入<code>--dbpath</code>, 例如</p>

<p><code>D:\MongoDB\bin&gt;mongod.exe --dbpath=D:\MongoDB\data</code></p>

<p>這樣就可以了!</p>

<p>以上安裝MongoDb的教學, 可參考以下網站</p>

<p><a href="http://blog.gtwang.org/windows/windows-install-mongodb-database/" target="_blank">在 Windows 中安裝 MongoDB 資料庫</a></p>

<p><a href="http://fecbob.pixnet.net/blog/post/38494357-mongodb%E5%9C%A8windows%E4%B8%8B%E5%AE%89%E8%A3%9D%E9%85%8D%E7%BD%AE" target="_blank">MongoDB 在 Windows 下安裝配置</a></p>

<p><a href="http://www.runoob.com/mongodb/mongodb-window-install.html" target="_blank">window 平台安装 MongoDB</a></p>

<p>好, 啟動MongoDb之後, 我們就可以切回來Sails專案了</p>

<p>我們重啟Sails, 指令<code>sails lift</code></p>

<p>接下來我們在瀏覽器輸入<code>http://localhost:1337</code>, 新增使用者</p>

<p>成功之後, 你會發現使用者已經被新增到MongoDb裡面去了, 試一下其他功能如修改, 應該都能正常運作!</p>

<p>今天就上到這邊啦! 下課~~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails練習之七]]></title>
    <link href="http://kennytu.github.io/blog/2015/11/26/sails-study07/"/>
    <updated>2015-11-26T10:34:50+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/11/26/sails-study07</id>
    <content type="html"><![CDATA[<p>本章緊接著前一篇, 我們要來實作Delete的功能</p>

<p>這篇參考此Youtube:<a href="https://www.youtube.com/watch?v=6sIrHPlJJQk" target="_blank">Building a Sails Application: Ep9 - Deleting a user account.</a></p>

<p>我們到<code>UserController.js</code>去新增我們的delete程式碼</p>

<pre><code class="js UserController.js 新增 destroy function">
  destroy: function(req, res, next){
    console.log("Hi, destroy");
    User.findOne(req.param('id'), function foundUser(err, user){
      if (err) return next(err);
      if(!user) return next('User doesn\'t exist.');

      User.destroy(req.param('id'), function userDestroyed(err) {
        if(err) return next(err);
      });

      res.redirect('/user');

  });
</code></pre>

<!--more-->


<p>我們注意到<code>if(!user) return next('User doesn\'t exist.');</code></p>

<p>我們也把這一段敘述加到<code>edit action</code>裡面</p>

<pre><code class="js UserController.js 修改 edit action">
edit: function(req, res, next){
    console.log("hi, edit!");

    //Find the user from the id passed in via params
    User.findOne(req.param('id'), function foundUser(err, user){
      if(err) return next(err);
      if(!user) return next('User doesn\'t exist.');

      res.view({
        user: user
      });
    });
},
</code></pre>

<p>然後我們回到<code>views\user\index.ejs</code>, 加入以下程式碼</p>

<p>```html views\user\index.ejs 加入destroy (使用POST方法)</p>

<div class="container">
  <h3>Users</h3>
  <table class="table">
    <tr>
      <th>ID</th>
      <th>Name</th>
      <th>Title</th>
      <th>Email</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>

    <% _.each(users, function(user){ %>
    <tr data-id="<%= user.id %>" data-model="user">
      <td><%= user.id %></td>
      <td><%= user.name %></td>
      <td><%= user.title%></td>
      <td><%= user.email%></td>
      <td><a href="http://kennytu.github.io/user/show/<%= user.id %>" class="btn btn-sm btn-primary">Show</a></td>
      <td><a href="http://kennytu.github.io/user/edit/<%= user.id %>" class="btn btn-sm btn-warning">Edit</a></td>

      <td>
        <form action="/user/destroy/<%= user.id%>" method="POST">
          <input type="hidden" name="_method" value="delete"/>
          <input type="submit" class="btn btn-sm btn-danger" value="Delete"/>
          <input type="hidden" name="_csrf" value="<%= _csrf %>"/>
        </form>
      </td>
    </tr>

    <%}) %>
  </table>
</div>


<p>```</p>

<p>注意到我們對<code>destroy</code>使用<code>POST</code>方法, 其他的<code>action</code>我們是用<code>GET</code>方法</p>

<p>由於我們的destroy是用另外一個form, 所以我們要在新增一個hidden的_csrf, 否則我們會沒有辦法access網頁</p>

<p>好, 完成之後, 存檔, 重啟sails</p>

<p>瀏覽器輸入<code>http://localhost:1337/user</code></p>

<p>就可以玩玩看delete的功能了!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails練習之六]]></title>
    <link href="http://kennytu.github.io/blog/2015/11/24/sails-study06/"/>
    <updated>2015-11-24T22:12:51+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/11/24/sails-study06</id>
    <content type="html"><![CDATA[<p>本章接著<a href="https://www.youtube.com/watch?v=GHp1g7Z0Yo4" target=_blank>Building a Sails Application: Ep8 - Adding a user list, index, edit, and update action.</a></p>

<p>影片一開始, Irl nathan介紹了ejs中, <code>&lt;%- %&gt;</code>以及<code>&lt;%= %&gt;</code>有什麼不同</p>

<p>簡單來說</p>

<p> <code>&lt;%- %&gt;</code>有 <code>-</code> 這個記號的, 若被此tag包含起來的程式碼有java script, 那麼ejs就會去執行它, 這個是一個很常會讓人侵入的地方,</p>

<p>而<code>&lt;%= %&gt;</code>就不會對java script做解讀,ejs會直接跳過js, 直接輸出到頁面上</p>

<p>還有一個是<code>&lt;% %&gt;</code>, 沒有加任何符號的, 這個就是單純的ejs嵌入javascript程式碼用的.</p>

<!--more-->


<p>Irl nathan示範了如何在新增使用者的欄位, 注入java script程式碼, 讓其可以執行的例子</p>

<p>我們在新增使用者的頁面, 在第二個欄位, 輸入user title的這個,</p>

<p>輸入<code>&lt;script&gt; alert("I am a bad guy");&lt;/script&gt;</code></p>

<p>將其他輸入項輸入完成之後, 按下Enter, 跳轉到User Info頁面的時候</p>

<p>會跳出一個<code>I am a bad guy</code>的alert,</p>

<p>這很不好, 所以我們要來改寫程式碼</p>

<p>將所有<code>&lt;%-</code>都換成<code>&lt;%=</code></p>

<p>```js show.ejs</p>

<div class="container">
  <h1><%= user.name %></h1>
  <h3><%= user.title %></h3>
  <hr>
  <h3>contact: <%= user.email %></h3>

  <a class="btn btn-medium btn-primary" href="http://kennytu.github.io/user/edit/<%= user.id %>%>">Edit</a>

</div>


<pre><code>
好的, 基礎原理介紹了一下之後, 我們要進入正題

我們要修改當我們在瀏覽器輸入`http://localhost:1337/user`的時候,

後端會回傳一個user model的json格式回來, 我們要來將這個json做成精美的網頁

先到`UserController.js`

加入底下程式碼
</code></pre>

<p>//render the profile view (e.g. /views/show.ejs)
    show: function(req, res, next){
      User.findOne(req.param(&lsquo;id&rsquo;), function foundUser(err, user){
        if(err) return next(err);
        if(!user) return next();
        res.view({
          user: user
        });
      });
    },</p>

<pre><code>index: function(req, res, next){
  console.log("hi! there!");
  //Get an array of all users in the User collection(e.g. table)
  User.find(function foundUsers(err, users){
    if(err) return (err);
    //pass the array down to the /views/index.ejs page
    res.view({
      users: users
    });
  });
}
</code></pre>

<pre><code>
接著在`views\user\` 新增 `index.ejs`
</code></pre>

<div class="container">
  <h3>Users</h3>
  <table class="table">
    <tr>
      <th>ID</th>
      <th>Name</th>
      <th>Title</th>
      <th>Email</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>

    <% _.each(users, function(user){ %>
    <tr data-id="<%= user.id %>" data-model="user">
      <td><%= user.id %></td>
      <td><%= user.name %></td>
      <td><%= user.title%></td>
      <td><%= user.email%></td>
      <td><a href="http://kennytu.github.io/user/show/<%= user.id %>" class="btn btn-sm btn-primary">Show</a></td>
      <td><a href="http://kennytu.github.io/user/edit/<%= user.id %>" class="btn btn-sm btn-warning">Edit</a></td>
      <td><a href="http://kennytu.github.io/user/destroy/<%= user.id %>" class="btn btn-sm btn-danger">Delete</a></td>
    </tr>

    <%}) %>
  </table>
</div>


<pre><code>
新增完成之後, 剩下的就是Saisl框架會幫我們處理的事情

存檔之後, 重啟sails

輸入 `http://localhost:1337/user`

就可以看到精美的User List列表啦!

接下來我們來處理`edit`以及`update`這兩個action

回到`UserController.js`,新增`edit`以及`update`
</code></pre>

<p>//render the edit view (e.g. /views/edit.ejs)
  edit: function(req, res, next){</p>

<pre><code>//Find the user from the id passed in via params
User.findOne(req.param('id'), function foundUser(err, user){
  if(err) return next(err);
  if(!user) return next();

  res.view({
    user: user
  });
});
</code></pre>

<p>  },</p>

<p>  // process the info from edit view
  update: function(req, res, next){
    User.update(req.param(&lsquo;id&rsquo;), req.params.all(), function userUpdated(err){
      if (err){
        return res.redirect(&lsquo;/user/edit/&rsquo; + req.param(&lsquo;id&rsquo;));
      }</p>

<pre><code>  res.redirect('/user/show/' + req.param('id'));
});
</code></pre>

<p>  }</p>

<pre><code>
接著在`views\user\`新增`edit.ejs`
</code></pre>

<p><form action="/user/update/<%= user.id %>&ldquo; method="POST&rdquo; class=&ldquo;form-signin&rdquo;></p>

<p>  <h2> Hey, you&rsquo;re editing a user&hellip;</h2></p>

<p>  <input value="<%= user.name%>&ldquo; name="name&rdquo; type=&ldquo;text&rdquo; class=&ldquo;form-control&rdquo;/>
  <input value="<%= user.title%>&ldquo; name="title&rdquo; type=&ldquo;text&rdquo; class=&ldquo;form-control&rdquo;/>
  <input value="<%= user.email%>&ldquo; name="email&rdquo; type=&ldquo;text&rdquo; class=&ldquo;form-control&rdquo;/>
  <input type="submit" value="Proceed" class="btn btn-lg btn-primary btn-block"/>
  <input type="hidden" name="_csrf" value="<%= _csrf %>&ldquo;/>
</form></p>

<pre><code>
重啟sails, 我們試試看Edit, 應該有畫面出來了

接下來嘗試輸入一下資料, 發現居然有jQuery的Validation出來作怪!!!

作者在這邊大叫了一聲!!!~~~ 阿!~~~ 

隨即馬上說這個超簡單可以解決, 讓我們繼續看下去

我們先到`assets\js\dependencies\customVaildate.js`

將這行 `$('.form-signin').validate({` 修改成 `$('#sign-up-form').validate({`

注意我們將`.form-signin`改成`#sign-up-form`, 一個點變成一個井號

這邊要提到`CSS`以及`Javascript`的Class以及ID的用法

對於CSS來說, 使用`.`定義的都是Class, 而使用`#`的則是ID命名

關於Class以及ID的觀念和用法, 請參考底下網站

&lt;a href="http://www.minwt.com/webdesign-dev/css/30.html" target="_blank"&gt;[CSS]id 與 class 別再傻傻分不清楚&lt;/a&gt;

&lt;a href="http://www.1keydata.com/css-tutorial/tw/class-id.php" target="_blank"&gt; CSS Class 與 CSS ID&lt;/a&gt;

&lt;a href="http://www.1keydata.com/css-tutorial/tw/syntax.php" target="_blank"&gt;CSS 教學 &gt; 語法&lt;/a&gt;

所以呢, 我們作者就把jQuery這一段改成`id`之後, 就可以唯一指定登錄頁面是使用這個邏輯了

接著, 我們要去改views\user\new.ejs
</code></pre>

<p><form action="/user/create" method="POST" id="sign-up-form" class="form-signin"></p>

<p>```</p>

<p>存檔之後, 重啟sails, 就可以在測試看看, JQuery的Vaildation就不會出現在Edit的頁面上了</p>

<blockquote><p>更新-> 我剛剛把edit.js裡面的action打成actoin,結果debug半天阿~ 拎老師咧</p></blockquote>

<p>好的, Edit功能做完之後, 測試完若沒有問題&hellip; 我們接下來就來處理Delete了</p>

<p>由於Delete會學習到POST的概念, 所以作者把它放在下一個課程</p>

<p>今天就先到這邊啦!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails練習之五]]></title>
    <link href="http://kennytu.github.io/blog/2015/11/23/sails-study05/"/>
    <updated>2015-11-23T16:56:55+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/11/23/sails-study05</id>
    <content type="html"><![CDATA[<p>終於來到練習的第五集了, 這一集的影片連結是<a href="https://www.youtube.com/watch?v=_wL2cS0GmJQ&index=8&list=PLWsZeJCry-F4K4iRImeB3-i0S5mw9Ak-W" target=_blank>Building a Sails Application: Ep6 - Creating a policy and adding client-side validation</a></p>

<p>上一個單元, Irl nathan展示了如何在UserController中, 實現Handling validation errors with a flash message.</p>

<p>想當然, sails有更優雅的做法, 那就是本章要介紹的policy機制.</p>

<!--more-->


<p>先來寫程式碼</p>

<p>在<code>api\policies\</code> 創建 <code>flash.js</code>, 內如如下</p>

<pre><code class="js flash.js">
module.exports = function(req, res, next) {

  res.locals.flash = {};

  if(!req.session.flash) return next();

  res.locals.flash = _.clone(req.session.flash);

  // clear flash
  req.session.flash = {};

  next();
};
</code></pre>

<p>然後在 <code>config\policies.js</code> 找到</p>

<pre><code class="js policies.js ">
 //'*': true,
   '*': 'flash'
</code></pre>

<p>這樣就設定完成了, 接著, 重新啟動sails</p>

<p>然後驗證一下註冊資訊若輸入錯誤, 是不是有相同的提示效果</p>

<p>基本上應該都要很順利.</p>

<p>接下來, 作者用JQuery來美化頁面上的錯誤訊息</p>

<p>首先, 我們去下載<a href="http://jqueryvalidation.org/" target=_blank>jQuery Validation Plugin</a></p>

<p>壓縮檔解壓縮之後, 在<code>dist</code>的目錄下找到<code>additional-methods.min.js</code></p>

<p>把這個檔案copy到sails專案底下的<code>assets\js\dependencies</code></p>

<p>接著修改<code>tasks\pipeline.js</code></p>

<pre><code class="js pipeline.js">
// Client-side javascript files to inject in order
// (uses Grunt-style wildcard/glob/splat expressions)
var jsFilesToInject = [

  // Load sails.io before everything else
  'js/dependencies/sails.io.js',

  // Dependencies like jQuery, or Angular are brought in here
  'js/dependencies/jquery.js',
  'js/dependencies/jquery.validate.min.js',
  'js/dependencies/**/*.js',

  // All of the rest of your client-side js files
  // will be injected here in no particular order.

  'js/**/*.js',

  // Use the "exclude" operator to ignore files
  // '!js/ignore/these/files/*.js'

];
</code></pre>

<p>注意以上的程式碼, 有先後順序, jquery.js在前面, 接下來才是<code>jquery.validate.min.js</code></p>

<p>接著, 在新增<code>assets\js\dependencies\</code> 底下新增<code>customVaildate.js</code></p>

<pre><code class="js customVaildate.js">
$(document).ready(function () {

  $('.form-signin').validate({
    rules: {
      name:{
        required: true
      },
      email: {
        type: 'email',
        required: true
      },
      password: {
        minlength:6,
        required: true
      },
      confirmation: {
        minlength:6,
        equalTo: "#password"
      }
    },
    success: function(element){
      element.text('OK!').addClass('valid');
    }
  });

});
</code></pre>

<p>這個檔案會被sails自動讀取, 是因為我們在<code>pipeline.js</code>裡面有一行敘述是<code>'js/**/*.js'</code> sails會自動讀取js目錄底下所有的java script檔案</p>

<p>新增完成之後, 重新啟動sails</p>

<p>就可以看到我們的註冊畫面有Jquery的Validate的檢查樣式了</p>

<p>接著我們上下一課: <a href="https://www.youtube.com/watch?v=HozWtywQNMo&list=PLWsZeJCry-F4K4iRImeB3-i0S5mw9Ak-W&index=9" target="_blank">Building a Sails Application: Ep7 - Adding the show action.</a></p>

<p>我們要來新增<code>show</code>每一個user的基本資料的action</p>

<p>先修改UserController.js</p>

<pre><code class="js UserController.js ">
module.exports = {
    'new': function(req, res){
        //res.locals.flash = _.clone(req.session.flash);
        res.view();
        //req.session.flash = {};
    },

    create: function (req, res, next) {
      User.create(req.params.all(), function userCreated(err,user){
          //if(err) return next(err);

          if(err){
            console.log(err);
            req.session.flash = {
              err: err
            }
            //if error redirect back to sign-up page
            return res.redirect('/user/new');
          }
        //res.json(user);
        //req.session.flash = {};
        res.redirect('/user/show/'+user.id);
      });
    },
    //render the profile view (e.g. /views/show.ejs)
    show: function(req, res, next){
      User.findOne(req.param('id'), function foundUser(err, user){
        if(err) return next(err);
        if(!user) return next();
        res.view({
          user: user
        });
      });
    }
};
</code></pre>

<p>主要修改有<code>create</code>有一個<code>res.redirect</code>, 以及新增了一個<code>show</code>的function</p>

<p>接著在<code>views\user\</code>底下新增<code>show.ejs</code></p>

<p>```js show.ejs</p>

<div class="container">
  <h1><%- user.name %></h1>
  <h3><%- user.title %></h3>
  <hr>
  <h3>contact: <%- user.email %></h3>

  <a class="btn btn-medium btn-primary" href="http://kennytu.github.io/user/edit/<%= user.id %>%>">Edit</a>

</div>


<p>```</p>

<p>這樣,每一次在create使用者的時候, 就會導入show.ejs的頁面</p>

<p>或者可以直接輸入 <code>http://localhost:1337/user/show/2</code> 這樣的url直接查詢</p>

<p>好的, 今天的練習就到這邊</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails練習之四]]></title>
    <link href="http://kennytu.github.io/blog/2015/11/18/sails-study04/"/>
    <updated>2015-11-18T18:38:20+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/11/18/sails-study04</id>
    <content type="html"><![CDATA[<p>OK, 接下來這篇<a href="https://www.youtube.com/watch?v=4Gbc9ZA2-YY&list=PLWsZeJCry-F4K4iRImeB3-i0S5mw9Ak-W&index=7" target="_blank">Building a Sails Application: Ep5 - Handling validation errors with a flash message</a></p>

<p>作者要示範如何handle error</p>

<p>當我們登入註冊頁面, 然後沒有輸入任何資料, 或者資料輸入錯誤, 就按下Create Account. Sails會回傳錯誤資訊. 我們現在要handle這個錯誤, 請看以下練習</p>

<!--more-->


<p>到<code>UserController.js</code>, 修改create function</p>

<pre><code class="js">
module.exports = {
    'new': function(req, res){
        res.locals.flash = _.clone(req.session.flash);
        res.view();
        req.session.flash = {};
    },

    create: function (req, res, next) {
      User.create(req.params.all(), function userCreated(err,user){
          //if(err) return next(err);

          if(err){
            console.log(err);
            req.session.flash = {
              err: err
            }
            //if error redirect back to sign-up page
            return res.redirect('/user/new');
          }

          res.json(user);
        req.session.flash = {};
      });
    }
};
</code></pre>

<p>OK.</p>

<p>然後到new.ejs,參考底下程式碼</p>

<pre><code class="js new.ejs ">
&lt;form action="/user/create" method="POST" class="form-signin"&gt;
  &lt;h2 class="form-signin-heading"&gt; Create an account&lt;/h2&gt;


  &lt;% if(flash &amp;&amp; flash.err){ %&gt;
  &lt;ul class="alert alert-success"&gt;
    &lt;% Object.keys(flash.err).forEach(function(error){ %&gt;
    &lt;li&gt;&lt;%- JSON.stringify(flash.err[error]) %&gt;&lt;/li&gt;
    &lt;% })%&gt;
  &lt;/ul&gt;
  &lt;%}%&gt;


  &lt;div class="form-group"&gt;
  &lt;input type="text" class="form-control" placeholder="your name" name="name"&gt;
  &lt;/div&gt;

  &lt;input type="text" class="form-control" placeholder="your title" name="title"&gt;

  &lt;input type="text" class="form-control" placeholder="email address" name="email"&gt;

  &lt;input type="password" class="form-control" placeholder="password" name="password"&gt;

  &lt;input type="password" class="form-control" placeholder="password confirmation" name="confirmation"&gt;

  &lt;input type="submit" class="btn btn-lg btn-primary btn-block" value="Create Account"/&gt;

  &lt;input type="hidden" name="_csrf" value="&lt;%= _csrf %&gt;"/&gt;

&lt;/form&gt;
</code></pre>

<p>重新啟動, 測試看看, 應該就沒問題了</p>

<p>這篇主要在講後端處理的技術, 以及在前端如何使用ejs的一些巧技巧</p>

<p>精華的部分就是在<code>res.locals.flash</code>和<code>req.session.flash</code>這兩個上面, 以及前端頁面, 像是 <code>&lt;%</code> <code>%&gt;</code>這樣嵌入式的ejs用法..</p>

<p>說實話, 我現階段還對ejs語法不是很熟, 到時候再來補齊相關資訊嚕</p>
]]></content>
  </entry>
  
</feed>
