<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sails | 江湖險惡，我從來都不輕易留下我的姓名。]]></title>
  <link href="http://kennytu.github.io/blog/categories/sails/atom.xml" rel="self"/>
  <link href="http://kennytu.github.io/"/>
  <updated>2015-11-25T18:45:57+08:00</updated>
  <id>http://kennytu.github.io/</id>
  <author>
    <name><![CDATA[Kenny Tu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sails練習之六]]></title>
    <link href="http://kennytu.github.io/blog/2015/11/24/sails-study06/"/>
    <updated>2015-11-24T22:12:51+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/11/24/sails-study06</id>
    <content type="html"><![CDATA[<p>本章接著<a href="https://www.youtube.com/watch?v=GHp1g7Z0Yo4" target=_blank>Building a Sails Application: Ep8 - Adding a user list, index, edit, and update action.</a></p>

<p>影片一開始, Irl nathan介紹了ejs中, <code>&lt;%- %&gt;</code>以及<code>&lt;%= %&gt;</code>有什麼不同</p>

<p>簡單來說</p>

<p> <code>&lt;%- %&gt;</code>有 <code>-</code> 這個記號的, 若被此tag包含起來的程式碼有java script, 那麼ejs就會去執行它, 這個是一個很常會讓人侵入的地方,</p>

<p>而<code>&lt;%= %&gt;</code>就不會對java script做解讀,ejs會直接跳過js, 直接輸出到頁面上</p>

<p>還有一個是<code>&lt;% %&gt;</code>, 沒有加任何符號的, 這個就是單純的ejs嵌入javascript程式碼用的.</p>

<p>Irl nathan示範了如何在新增使用者的欄位, 注入java script程式碼, 讓其可以執行的例子</p>

<p>我們在新增使用者的頁面, 在第二個欄位, 輸入user title的這個,</p>

<p>輸入<code>&lt;script&gt; alert("I am a bad guy");&lt;/script&gt;</code></p>

<p>將其他輸入項輸入完成之後, 按下Enter, 跳轉到User Info頁面的時候</p>

<p>會跳出一個<code>I am a bad guy</code>的alert,</p>

<p>這很不好, 所以我們要來改寫程式碼</p>

<p>將所有<code>&lt;%-</code>都換成<code>&lt;%=</code></p>

<p>```js show.ejs</p>

<div class="container">
  <h1><%= user.name %></h1>
  <h3><%= user.title %></h3>
  <hr>
  <h3>contact: <%= user.email %></h3>

  <a class="btn btn-medium btn-primary" href="http://kennytu.github.io/user/edit/<%= user.id %>%>">Edit</a>

</div>


<pre><code>
好的, 基礎原理介紹了一下之後, 我們要進入正題

我們要修改當我們在瀏覽器輸入`http://localhost:1337/user`的時候,

後端會回傳一個user model的json格式回來, 我們要來將這個json做成精美的網頁

先到`UserController.js`

加入底下程式碼
</code></pre>

<p>//render the profile view (e.g. /views/show.ejs)
    show: function(req, res, next){
      User.findOne(req.param(&lsquo;id&rsquo;), function foundUser(err, user){
        if(err) return next(err);
        if(!user) return next();
        res.view({
          user: user
        });
      });
    },</p>

<pre><code>index: function(req, res, next){
  console.log("hi! there!");
  //Get an array of all users in the User collection(e.g. table)
  User.find(function foundUsers(err, users){
    if(err) return (err);
    //pass the array down to the /views/index.ejs page
    res.view({
      users: users
    });
  });
}
</code></pre>

<pre><code>
接著在`views\user\` 新增 `index.ejs`
</code></pre>

<div class="container">
  <h3>Users</h3>
  <table class="table">
    <tr>
      <th>ID</th>
      <th>Name</th>
      <th>Title</th>
      <th>Email</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>

    <% _.each(users, function(user){ %>
    <tr data-id="<%= user.id %>" data-model="user">
      <td><%= user.id %></td>
      <td><%= user.name %></td>
      <td><%= user.title%></td>
      <td><%= user.email%></td>
      <td><a href="http://kennytu.github.io/user/show/<%= user.id %>" class="btn btn-sm btn-primary">Show</a></td>
      <td><a href="http://kennytu.github.io/user/edit/<%= user.id %>" class="btn btn-sm btn-warning">Edit</a></td>
      <td><a href="http://kennytu.github.io/user/destroy/<%= user.id %>" class="btn btn-sm btn-danger">Delete</a></td>
    </tr>

    <%}) %>
  </table>
</div>


<pre><code>
新增完成之後, 剩下的就是Saisl框架會幫我們處理的事情

存檔之後, 重啟sails

輸入 `http://localhost:1337/user`

就可以看到精美的User List列表啦!

接下來我們來處理`edit`以及`update`這兩個action

回到`UserController.js`,新增`edit`以及`update`
</code></pre>

<p>//render the edit view (e.g. /views/edit.ejs)
  edit: function(req, res, next){</p>

<pre><code>//Find the user from the id passed in via params
User.findOne(req.param('id'), function foundUser(err, user){
  if(err) return next(err);
  if(!user) return next();

  res.view({
    user: user
  });
});
</code></pre>

<p>  },</p>

<p>  // process the info from edit view
  update: function(req, res, next){
    User.update(req.param(&lsquo;id&rsquo;), req.params.all(), function userUpdated(err){
      if (err){
        return res.redirect(&lsquo;/user/edit/&rsquo; + req.param(&lsquo;id&rsquo;));
      }</p>

<pre><code>  res.redirect('/user/show/' + req.param('id'));
});
</code></pre>

<p>  }</p>

<pre><code>
接著在`views\user\`新增`edit.ejs`
</code></pre>

<p><form action="/user/update/<%= user.id %>&ldquo; method="POST&rdquo; class=&ldquo;form-signin&rdquo;></p>

<p>  <h2> Hey, you&rsquo;re editing a user&hellip;</h2></p>

<p>  <input value="<%= user.name%>&ldquo; name="name&rdquo; type=&ldquo;text&rdquo; class=&ldquo;form-control&rdquo;/>
  <input value="<%= user.title%>&ldquo; name="title&rdquo; type=&ldquo;text&rdquo; class=&ldquo;form-control&rdquo;/>
  <input value="<%= user.email%>&ldquo; name="email&rdquo; type=&ldquo;text&rdquo; class=&ldquo;form-control&rdquo;/>
  <input type="submit" value="Proceed" class="btn btn-lg btn-primary btn-block"/>
  <input type="hidden" name="_csrf" value="<%= _csrf %>&ldquo;/>
</form></p>

<pre><code>
重啟sails, 我們試試看Edit, 應該有畫面出來了

接下來嘗試輸入一下資料, 發現居然有jQuery的Validation出來作怪!!!

作者在這邊大叫了一聲!!!~~~ 阿!~~~ 

隨即馬上說這個超簡單可以解決, 讓我們繼續看下去

我們先到`assets\js\dependencies\customVaildate.js`

將這行 `$('.form-signin').validate({` 修改成 `$('#sign-up-form').validate({`

注意我們將`.form-signin`改成`#sign-up-form`, 一個點變成一個井號

這邊要提到`CSS`以及`Javascript`的Class以及ID的用法

對於CSS來說, 使用`.`定義的都是Class, 而使用`#`的則是ID命名

關於Class以及ID的觀念和用法, 請參考底下網站

&lt;a href="http://www.minwt.com/webdesign-dev/css/30.html" target="_blank"&gt;[CSS]id 與 class 別再傻傻分不清楚&lt;/a&gt;

&lt;a href="http://www.1keydata.com/css-tutorial/tw/class-id.php" target="_blank"&gt; CSS Class 與 CSS ID&lt;/a&gt;

&lt;a href="http://www.1keydata.com/css-tutorial/tw/syntax.php" target="_blank"&gt;CSS 教學 &gt; 語法&lt;/a&gt;

所以呢, 我們作者就把jQuery這一段改成`id`之後, 就可以唯一指定登錄頁面是使用這個邏輯了

接著, 我們要去改views\user\new.ejs
</code></pre>

<p><form action="/user/create" method="POST" id="sign-up-form" class="form-signin"></p>

<p>```</p>

<p>存檔之後, 重啟sails, 就可以在測試看看, JQuery的Vaildation就不會出現在Edit的頁面上了</p>

<blockquote><p>更新 我剛剛把edit.js裡面的action打成actoin, 結果debug半天阿! 拎老師咧</p></blockquote>

<p>好的, Edit功能做完之後, 測試完若沒有問題&hellip; 我們接下來就來處理Delete了</p>

<p>由於Delete會學習到POST的概念, 所以作者把它放在下一個課程</p>

<p>今天就先到這邊啦!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails練習之五]]></title>
    <link href="http://kennytu.github.io/blog/2015/11/23/sails-study05/"/>
    <updated>2015-11-23T16:56:55+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/11/23/sails-study05</id>
    <content type="html"><![CDATA[<p>終於來到練習的第五集了, 這一集的影片連結是<a href="https://www.youtube.com/watch?v=_wL2cS0GmJQ&index=8&list=PLWsZeJCry-F4K4iRImeB3-i0S5mw9Ak-W" target=_blank>Building a Sails Application: Ep6 - Creating a policy and adding client-side validation</a></p>

<p>上一個單元, Irl nathan展示了如何在UserController中, 實現Handling validation errors with a flash message.</p>

<p>想當然, sails有更優雅的做法, 那就是本章要介紹的policy機制.</p>

<!--more-->


<p>先來寫程式碼</p>

<p>在<code>api\policies\</code> 創建 <code>flash.js</code>, 內如如下</p>

<pre><code class="js flash.js">
module.exports = function(req, res, next) {

  res.locals.flash = {};

  if(!req.session.flash) return next();

  res.locals.flash = _.clone(req.session.flash);

  // clear flash
  req.session.flash = {};

  next();
};
</code></pre>

<p>然後在 <code>config\policies.js</code> 找到</p>

<pre><code class="js policies.js ">
 //'*': true,
   '*': 'flash'
</code></pre>

<p>這樣就設定完成了, 接著, 重新啟動sails</p>

<p>然後驗證一下註冊資訊若輸入錯誤, 是不是有相同的提示效果</p>

<p>基本上應該都要很順利.</p>

<p>接下來, 作者用JQuery來美化頁面上的錯誤訊息</p>

<p>首先, 我們去下載<a href="http://jqueryvalidation.org/" target=_blank>jQuery Validation Plugin</a></p>

<p>壓縮檔解壓縮之後, 在<code>dist</code>的目錄下找到<code>additional-methods.min.js</code></p>

<p>把這個檔案copy到sails專案底下的<code>assets\js\dependencies</code></p>

<p>接著修改<code>tasks\pipeline.js</code></p>

<pre><code class="js pipeline.js">
// Client-side javascript files to inject in order
// (uses Grunt-style wildcard/glob/splat expressions)
var jsFilesToInject = [

  // Load sails.io before everything else
  'js/dependencies/sails.io.js',

  // Dependencies like jQuery, or Angular are brought in here
  'js/dependencies/jquery.js',
  'js/dependencies/jquery.validate.min.js',
  'js/dependencies/**/*.js',

  // All of the rest of your client-side js files
  // will be injected here in no particular order.

  'js/**/*.js',

  // Use the "exclude" operator to ignore files
  // '!js/ignore/these/files/*.js'

];
</code></pre>

<p>注意以上的程式碼, 有先後順序, jquery.js在前面, 接下來才是<code>jquery.validate.min.js</code></p>

<p>接著, 在新增<code>assets\js\dependencies\</code> 底下新增<code>customVaildate.js</code></p>

<pre><code class="js customVaildate.js">
$(document).ready(function () {

  $('.form-signin').validate({
    rules: {
      name:{
        required: true
      },
      email: {
        type: 'email',
        required: true
      },
      password: {
        minlength:6,
        required: true
      },
      confirmation: {
        minlength:6,
        equalTo: "#password"
      }
    },
    success: function(element){
      element.text('OK!').addClass('valid');
    }
  });

});
</code></pre>

<p>這個檔案會被sails自動讀取, 是因為我們在<code>pipeline.js</code>裡面有一行敘述是<code>'js/**/*.js'</code> sails會自動讀取js目錄底下所有的java script檔案</p>

<p>新增完成之後, 重新啟動sails</p>

<p>就可以看到我們的註冊畫面有Jquery的Validate的檢查樣式了</p>

<p>接著我們上下一課: <a href="https://www.youtube.com/watch?v=HozWtywQNMo&list=PLWsZeJCry-F4K4iRImeB3-i0S5mw9Ak-W&index=9" target="_blank">Building a Sails Application: Ep7 - Adding the show action.</a></p>

<p>我們要來新增<code>show</code>每一個user的基本資料的action</p>

<p>先修改UserController.js</p>

<pre><code class="js UserController.js ">
module.exports = {
    'new': function(req, res){
        //res.locals.flash = _.clone(req.session.flash);
        res.view();
        //req.session.flash = {};
    },

    create: function (req, res, next) {
      User.create(req.params.all(), function userCreated(err,user){
          //if(err) return next(err);

          if(err){
            console.log(err);
            req.session.flash = {
              err: err
            }
            //if error redirect back to sign-up page
            return res.redirect('/user/new');
          }
        //res.json(user);
        //req.session.flash = {};
        res.redirect('/user/show/'+user.id);
      });
    },
    //render the profile view (e.g. /views/show.ejs)
    show: function(req, res, next){
      User.findOne(req.param('id'), function foundUser(err, user){
        if(err) return next(err);
        if(!user) return next();
        res.view({
          user: user
        });
      });
    }
};
</code></pre>

<p>主要修改有<code>create</code>有一個<code>res.redirect</code>, 以及新增了一個<code>show</code>的function</p>

<p>接著在<code>views\user\</code>底下新增<code>show.ejs</code></p>

<p>```js show.ejs</p>

<div class="container">
  <h1><%- user.name %></h1>
  <h3><%- user.title %></h3>
  <hr>
  <h3>contact: <%- user.email %></h3>

  <a class="btn btn-medium btn-primary" href="http://kennytu.github.io/user/edit/<%= user.id %>%>">Edit</a>

</div>


<p>```</p>

<p>這樣,每一次在create使用者的時候, 就會導入show.ejs的頁面</p>

<p>或者可以直接輸入 <code>http://localhost:1337/user/show/2</code> 這樣的url直接查詢</p>

<p>好的, 今天的練習就到這邊</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails練習之四]]></title>
    <link href="http://kennytu.github.io/blog/2015/11/18/sails-study04/"/>
    <updated>2015-11-18T18:38:20+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/11/18/sails-study04</id>
    <content type="html"><![CDATA[<p>OK, 接下來這篇<a href="https://www.youtube.com/watch?v=4Gbc9ZA2-YY&list=PLWsZeJCry-F4K4iRImeB3-i0S5mw9Ak-W&index=7" target="_blank">Building a Sails Application: Ep5 - Handling validation errors with a flash message</a></p>

<p>作者要示範如何handle error</p>

<p>當我們登入註冊頁面, 然後沒有輸入任何資料, 或者資料輸入錯誤, 就按下Create Account. Sails會回傳錯誤資訊. 我們現在要handle這個錯誤, 請看以下練習</p>

<!--more-->


<p>到<code>UserController.js</code>, 修改create function</p>

<pre><code class="js">
module.exports = {
    'new': function(req, res){
        res.locals.flash = _.clone(req.session.flash);
        res.view();
        req.session.flash = {};
    },

    create: function (req, res, next) {
      User.create(req.params.all(), function userCreated(err,user){
          //if(err) return next(err);

          if(err){
            console.log(err);
            req.session.flash = {
              err: err
            }
            //if error redirect back to sign-up page
            return res.redirect('/user/new');
          }

          res.json(user);
        req.session.flash = {};
      });
    }
};
</code></pre>

<p>OK.</p>

<p>然後到new.ejs,參考底下程式碼</p>

<pre><code class="js new.ejs ">
&lt;form action="/user/create" method="POST" class="form-signin"&gt;
  &lt;h2 class="form-signin-heading"&gt; Create an account&lt;/h2&gt;


  &lt;% if(flash &amp;&amp; flash.err){ %&gt;
  &lt;ul class="alert alert-success"&gt;
    &lt;% Object.keys(flash.err).forEach(function(error){ %&gt;
    &lt;li&gt;&lt;%- JSON.stringify(flash.err[error]) %&gt;&lt;/li&gt;
    &lt;% })%&gt;
  &lt;/ul&gt;
  &lt;%}%&gt;


  &lt;div class="form-group"&gt;
  &lt;input type="text" class="form-control" placeholder="your name" name="name"&gt;
  &lt;/div&gt;

  &lt;input type="text" class="form-control" placeholder="your title" name="title"&gt;

  &lt;input type="text" class="form-control" placeholder="email address" name="email"&gt;

  &lt;input type="password" class="form-control" placeholder="password" name="password"&gt;

  &lt;input type="password" class="form-control" placeholder="password confirmation" name="confirmation"&gt;

  &lt;input type="submit" class="btn btn-lg btn-primary btn-block" value="Create Account"/&gt;

  &lt;input type="hidden" name="_csrf" value="&lt;%= _csrf %&gt;"/&gt;

&lt;/form&gt;
</code></pre>

<p>重新啟動, 測試看看, 應該就沒問題了</p>

<p>這篇主要在講後端處理的技術, 以及在前端如何使用ejs的一些巧技巧</p>

<p>精華的部分就是在<code>res.locals.flash</code>和<code>req.session.flash</code>這兩個上面, 以及前端頁面, 像是 <code>&lt;%</code> <code>%&gt;</code>這樣嵌入式的ejs用法..</p>

<p>說實話, 我現階段還對ejs語法不是很熟, 到時候再來補齊相關資訊嚕</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails練習之三]]></title>
    <link href="http://kennytu.github.io/blog/2015/11/18/sails-study03/"/>
    <updated>2015-11-18T12:05:14+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/11/18/sails-study03</id>
    <content type="html"><![CDATA[<p>前面兩個練習都做完之後, 我們終於有了一個還滿順眼的登入畫面</p>

<p>接下來我們按照Irl nathan的課程繼續我們的練習</p>

<p>課程連結在此 <a href="https://www.youtube.com/watch?v=WKtmKha6Ehw&index=6&list=PLWsZeJCry-F4K4iRImeB3-i0S5mw9Ak-W" target="_blank">Building a Sails Application: Ep4 - Creating a user account.</a></p>

<!--more-->


<p>在一開始, Nathan他shows了一個new.ejs的程式碼</p>

<p>你會發現它多了</p>

<p>```html</p>

<div class="control-group">
...
</div>


<pre><code>
若你用的是bootstrap3.x的版本, 就會發生找不到control-group的class, 這時候請到&lt;a href="http://getbootstrap.com/migration/" target="_blank"&gt;這裡&lt;/a&gt;, 找到對照bootstrap2.x 改版到3.x有關於一些相對應class名稱的修改.你就知道要怎麼對應這些bootstrap3.x的CSS了


接著, Ponzi花了點時間解釋`&lt;%= _csrf %&gt;`這個tag的用意

我們先到config/csrf.js, 將csrf Enable起來
</code></pre>

<p>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>
*                                                                           *
* Enabled CSRF protection for your site?                                    *
*                                                                           *
</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p>

<p>  module.exports.csrf = true;</p>

<pre><code>
至於CSRF是什麼東西, 之後我在整理出來寫在另一篇文章中

簡言之, CSRF是某種保護機制, 讓你可以識別使用者..

接著, 到`blueprints.js` 設定
</code></pre>

<p>actions: true,
rest: true,
shortcuts: true</p>

<pre><code>
存檔, 接著到UserController.js

加入以下程式碼
</code></pre>

<p>module.exports = {
    &lsquo;new&rsquo;: function(req, res){
        res.view();
    },</p>

<pre><code>create: function (req, res, next) {
  User.create(req.params.all(), function userCreated(err,user){
      if(err) return next(err);
      res.json(user);
  });
}
</code></pre>

<p>};</p>

<pre><code>
主要是新增`create`這個method. 

從新啟動sails

`sails lift`

輸入`http://localhost:1337`, 點擊 sing up now, 進入登錄畫面

輸入必要的資訊之後, 按下Create an account, 此時Sails會回傳下列的資訊
</code></pre>

<p>{
  &ldquo;name&rdquo;: &ldquo;kg&rdquo;,
  &ldquo;title&rdquo;: &ldquo;kaaa&rdquo;,
  &ldquo;email&rdquo;: &ldquo;<a href="&#x6d;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#107;&#x32;&#50;&#51;&#64;&#x68;&#111;&#116;&#x2e;&#x63;&#111;&#x6d;">&#107;&#x32;&#x32;&#x33;&#x40;&#x68;&#111;&#116;&#46;&#x63;&#x6f;&#109;</a>&rdquo;,
  &ldquo;password&rdquo;: &ldquo;1234&rdquo;,
  &ldquo;comfirmation&rdquo;: &ldquo;5678&rdquo;,
  &ldquo;_csrf&rdquo;: &ldquo;gdMb0LUb-zUlpCgAUgC0LW41ILym6M6_svV4&rdquo;,
  &ldquo;id&rdquo;: 3,
  &ldquo;createdAt&rdquo;: &ldquo;2015-11-18T09:20:31.268Z&rdquo;,
  &ldquo;updatedAt&rdquo;: &ldquo;2015-11-18T09:20:31.268Z&rdquo;
}</p>

<pre><code>
GOOD, 大功告成. 現在美中不足的就是密碼部分會是明碼的格式傳回, 這個我們馬上來處理

我們到`User.js`, 也就是`api\models\User.js`

加入底下的程式碼
</code></pre>

<p>toJSON: function(){
      var obj = this.toObject();
      delete obj.password;
      delete obj.confirmation;
      delete obj.encryptedPassword;
      delete obj._csrf;
      return obj;
    }</p>

<pre><code>
將toJSON加入, 然後重新啟動Sails

我們在測試一次, 就可以看到回傳的資訊已經隱藏了`password`, `confirmation`, `encryptedPassword`以及`_csrf`

測試內容如下
</code></pre>

<p>{
  &ldquo;name&rdquo;: &ldquo;23423&rdquo;,
  &ldquo;title&rdquo;: &ldquo;42344&rdquo;,
  &ldquo;email&rdquo;: &ldquo;3242@gmail.com&rdquo;,
  &ldquo;id&rdquo;: 4,
  &ldquo;createdAt&rdquo;: &ldquo;2015-11-18T09:34:28.608Z&rdquo;,
  &ldquo;updatedAt&rdquo;: &ldquo;2015-11-18T09:34:28.608Z&rdquo;
}</p>

<pre><code>
我們發現回傳的已經沒有敏感的資訊了.

另一方面, sails有更優雅的解決方案, sails提供了在model的一個Setting, 叫做`schema`, 若把`schema`設為`true`, 那麼`sails`只會保存在model中有定義的屬性, 若為false, 那麼sails就允許你可以任意儲存你想要的record的資料

官方網站的資料請參考&lt;a href="http://sailsjs.org/documentation/concepts/models-and-orm/model-settings#?schema" target="_blank"&gt;這裡&lt;/a&gt;

我們修改User.js, 把toJSON拿掉, 加入schema
</code></pre>

<p>module.exports = {</p>

<p>  schema: true,</p>

<p>  attributes: {
    name:{
        type: &lsquo;string&rsquo;,
        required: true
    },</p>

<pre><code>title:{
    type: 'string'
},

email: {
  type: 'email',
  required: true,
  unique: true
},

encryptedPassword:{
    type: 'string'
}

//toJSON: function(){
//  var obj = this.toObject();
//  delete obj.password;
//  delete obj.confirmation;
//  delete obj.encryptedPassword;
//  delete obj._csrf;
//  return obj;
//}
</code></pre>

<p>  }
};</p>

<pre><code>
從新啟動sails, 然後到瀏覽器, 記得清空瀏覽器緩存, 不然會有問題

輸入註冊資訊, 然後看回傳的訊息
</code></pre>

<p>{
  &ldquo;name&rdquo;: &ldquo;HappyKenny&rdquo;,
  &ldquo;title&rdquo;: &ldquo;HappyKennyYa&rdquo;,
  &ldquo;email&rdquo;: &ldquo;<a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#x68;&#x61;&#x70;&#x70;&#121;&#x40;&#99;&#111;&#109;&#46;&#x74;&#x77;">&#x68;&#97;&#112;&#x70;&#121;&#x40;&#x63;&#111;&#x6d;&#x2e;&#116;&#119;</a>&rdquo;,
  &ldquo;id&rdquo;: 6,
  &ldquo;createdAt&rdquo;: &ldquo;2015-11-18T09:52:11.686Z&rdquo;,
  &ldquo;updatedAt&rdquo;: &ldquo;2015-11-18T09:52:11.686Z&rdquo;
}</p>

<p>```</p>

<p>同樣的, 沒有敏感的資訊</p>

<p>你可以在瀏覽器輸入<code>http://localhost:1337/user</code></p>

<p>來觀看以往建立的user資料</p>

<p>OK, 這堂課就到這邊, 謝謝大家</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails練習之二]]></title>
    <link href="http://kennytu.github.io/blog/2015/11/17/sails-study02/"/>
    <updated>2015-11-17T10:54:23+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/11/17/sails-study02</id>
    <content type="html"><![CDATA[<p>本篇是接著Irl nathan的這篇</p>

<p><a href="https://www.youtube.com/watch?v=qUAzpyThAB0&index=5&list=PLWsZeJCry-F4K4iRImeB3-i0S5mw9Ak-W" target="_blank">Building a Sails Application: Ep3[UPDATED] - A user model/controller, signup page, sails blueprints</a></p>

<p>底下為練習內容</p>

<!--more-->


<h2>MVC架構</h2>

<p>Sails有支援MVC架構, 所以若你有想要完成一個概念性的物件, 這個物件有相對的屬性和行為,Sails會將這個物件的屬性放在Modules, 而行為就放在Controller</p>

<p>使用下列的語法來讓Sails自動創建Controller以及Module</p>

<pre><code class="batch">E:\sails_app\activeityOverload&gt;sails generate api user
info: Created a new api!
</code></pre>

<p>PS: 舊版的只要輸入<code>sails generate user</code> 就可以了</p>

<p>這樣Sails會在</p>

<p><code>api\controllers</code> 產生 <code>UserController.js</code></p>

<p><code>api\models</code> 產生 <code>User.js</code></p>

<p>其中,</p>

<p><code>controllers</code>放的是<code>action</code>的邏輯</p>

<p><code>modules</code>裡面放的是<code>attributes</code>的設定</p>

<p>OK, 接著我們來設計User的屬性, 修改 User.js</p>

<pre><code class="js">module.exports = {

  attributes: {
    name:{
        type: 'string',
        required: true
    },

    title:{
        type: 'string'
    },

    email: {
      type: 'email',
      required: true,
      unique: true
    },

    encryptedPassword:{
        type: 'string'
    }
  }
};
</code></pre>

<p>要注意上面的email寫法, sails 0.10以後, type要改成'email'</p>

<p>然後原本的email: true要拿掉</p>

<p>參考<a href="https://github.com/irlnathan/activityoverlord20/issues/13" target="_blank">這裡</a></p>

<p>編輯完成之後, 存檔, 執行 <code>sails lift</code></p>

<p>若是第一次新增api, sails應該會跳出底下的訊息</p>

<pre><code class="batch">E:\sails_app\activeityOverload&gt;sails lift

info: Starting app...

-----------------------------------------------------------------

 Excuse my interruption, but it looks like this app
 does not have a project-wide "migrate" setting configured yet.
 (perhaps this is the first time you're lifting it with models?)

 In short, this setting controls whether/how Sails will attempt to automatically
 rebuild the tables/collections/sets/etc. in your database schema.
 You can read more about the "migrate" setting here:
 http://sailsjs.org/#/documentation/concepts/ORM/model-settings.html?q=migrate

 In a production environment (NODE_ENV==="production") Sails always uses
 migrate:"safe" to protect inadvertent deletion of your data.
 However during development, you have a few other options for convenience:

 1. safe  - never auto-migrate my database(s). I will do it myself (by hand)
 2. alter - auto-migrate, but attempt to keep my existing data (experimental)
 3. drop  - wipe/drop ALL my data and rebuild models every time I lift Sails

What would you like Sails to do?

info: To skip this prompt in the future, set `sails.config.models.migrate`.
info: (conventionally, this is done in `config/models.js`)

warn: ** DO NOT CHOOSE "2" or "3" IF YOU ARE WORKING WITH PRODUCTION DATA **

prompt: ?:  error: Error: The hook `orm` is taking too long to load.
Make sure it is triggering its `initialize()` callback, or else set `sails.config.orm._hookTimeout to a higher value (currently 20000)
    at tooLong [as _onTimeout] (C:\Users\KennyTu\AppData\Roaming\npm\node_modules\sails\lib\app\private\loadHooks.js:92:21)
    at Timer.listOnTimeout (timers.js:89:15)
</code></pre>

<p>既然上面有提示到這個<a href="http://sailsjs.org/documentation/concepts/models-and-orm/model-settings#?migrate" target="_blank">網頁</a>, 我們就去看一下</p>

<p>大意就是說, sails他會做一些策略, 來和我們的資料庫互動, migrate(中文有遷移, 移居的意思), 有三種策略, 分別是safe, alter以及drop, 詳細我就不多說了, 去看網頁寫的很清楚</p>

<p>OK, 接下來我們要做的動作是去修改<code>config/models.js</code></p>

<pre><code class="js">module.exports.models = {

  /***************************************************************************
  *                                                                          *
  * Your app's default connection. i.e. the name of one of your app's        *
  * connections (see `config/connections.js`)                                *
  *                                                                          *
  ***************************************************************************/
  // connection: 'localDiskDb',

  /***************************************************************************
  *                                                                          *
  * How and whether Sails will attempt to automatically rebuild the          *
  * tables/collections/etc. in your schema.                                  *
  *                                                                          *
  * See http://sailsjs.org/#!/documentation/concepts/ORM/model-settings.html  *
  *                                                                          *
  ***************************************************************************/
   migrate: 'safe'

};
</code></pre>

<p>把migrate改成safe, 再重新執行<code>sails lift</code></p>

<p>基本上應該就沒問題可以正常執行了</p>

<p>接下來開啟瀏覽器, 輸入底下網址..</p>

<p>作者在輸入到一半的時候,故意只輸入部分, 來讓我們看一下出錯的效果</p>

<p><code>http://localhost:1337/user/create?name=kenny</code></p>

<p>伺服器回應的結果是:</p>

<pre><code class="js">{
  "error": "E_VALIDATION",
  "status": 400,
  "summary": "1 attribute is invalid",
  "model": "User",
  "invalidAttributes": {
    "email": [
      {
        "rule": "email",
        "message": "`undefined` should be a email (instead of \"null\", which is a object)"
      },
      {
        "rule": "required",
        "message": "\"required\" validation rule failed for input: null"
      }
    ]
  }
}
</code></pre>

<p>大意就是說, email需要輸入</p>

<p>我們再改一個正常的</p>

<p>在瀏覽器輸入URL如下</p>

<p><a href="http://localhost:1337/user/create?name=kennyg&amp;email=i@a.com">http://localhost:1337/user/create?name=kennyg&amp;email=i@a.com</a></p>

<p>注意email不能有用過的, 因為我們將<code>email</code>的其中一個<code>unique</code>的屬性設定為true</p>

<p>若沒有意外, 應該出現如下視窗</p>

<pre><code class="js">{
  "name": "kennyg",
  "email": "i@a.com",
  "createdAt": "2015-11-17T07:19:54.897Z",
  "updatedAt": "2015-11-17T07:19:54.897Z",
  "id": 2
}
</code></pre>

<p>大功告成啦!</p>

<p>注意一點, 我們現在還沒有對<code>UserController.js</code>寫任何邏輯, 以上的行為都是sails系統預設的 :)</p>

<blockquote><p>預設行為都放在blueprints.js下</p></blockquote>

<p>接下來, 我們要開始弄View的東西, 之前Sails幫我們自動生成Module以及Controller,</p>

<p>我們手動在<code>views</code>新增一個資料夾<code>user</code>,然後在<code>user</code>資料夾新增一個檔案名為<code>new.ejs</code>, 新增內容如下</p>

<p>```html</p>

<h1> User signup Form </h1>


<pre><code>
回到`UserController.js`, 在`api\controllers`底下

我們新增以下的code
</code></pre>

<p>module.exports = {
    &lsquo;new&rsquo;: function(req, res){
        res.view();
    }
};</p>

<pre><code>
重新啟動sails, 回到瀏覽器輸入localhost:1337, 按下Sing Up now, 視窗就會跳到new.ejs的page去

還記得嗎? 我們在static底下的index.ejs, button的href是指到/user/new這個action, 所以就會跳到new這邊來了

一般來說, sails會自動幫我們對應action以及底下的檔案, 若要關掉它, 就要去設定

現在我們修改`blueprints.js`, 在`config`底下

找到`rest`, 把他設定成`false`. __記得要把註解拿掉__

參照以下設定

    rest: false,
    shortcuts: false,
    actions: false,


設定好, 存檔, 重新啟動sails 

這時候進入首頁, 按下Sing up now, 我們會被導入404 pages

接著我們就開始手工打造我們的mapping

回到routes.js, 加入底下的code
</code></pre>

<pre><code>'/': {
    view: 'static/index'
},
'/user/new': {
    view: 'user/new'
}
</code></pre>

<pre><code>

從新啟動sails, 再次執行sing up now, 就可以導向到我們的頁面了

另一種routes.js風格的寫法, 如下
</code></pre>

<pre><code>'user/new': {
    controller: "UserController",
    action:"new"
}
</code></pre>

<pre><code>

這樣的寫法我在新版的sails上面都沒有辦法get到頁面, 不知道是不是要明確指定view才行

另外, 有關routes的其他寫法, 請參考&lt;a href="http://sailsjs.org/documentation/concepts/routes/custom-routes" target="_blank"&gt;Custom Routes&lt;/a&gt;的 __Controller / action target syntax__ 章節

&gt; ok, 我們先繼續, 等之後有靈感在回來試試看


現在先將剛剛在routes.js加入的'user/new'這一些敘述都刪掉, 存檔

回到`blueprints.js`, 將`action`改成`true`

然後修改new.ejs, 如底下的程式碼
</code></pre>

<p><form action="/user/create" method="POST" class="form-signin">
  <h2 > Create an account</h2>
  <input type="text" class="form-control" placeholder="your name" name="name">
  <input type="text" class="form-control" placeholder="your title" name="title">
  <input type="text" class="form-control" placeholder="email address" name="email">
  <input type="password" class="form-control" placeholder="password" name="password">
  <input type="password" class="form-control" placeholder="password confirmation" name="comfirmation"></p>

<p>  <input type="submit" class="btn btn-lg btn-primary btn-block" value="Create Account"/>
  <input type="hidden" name="_csrf" value="<%= _csrf %>&ldquo;/></p>

<p></form></p>

<pre><code>
由於new.ejs有用到一些css, 作者也對custom.less做了一些修改

程式碼如下
</code></pre>

<p>@white: #FFFFFF;
@green: #9EC03B;
@orange: #F48744;
@blue: #189ECA;
@gray: #777574;
@lightGrey: #AAAAAA;
@darkBlue: #106E8D;
@darkGray: #4A4A4A; // paragraphs
@red: #D16565; // error</p>

<p>body {
  padding-top: 60px;
  padding-bottom: 40px;
}</p>

<p>.jumbotron {
  text-align: center;
}</p>

<p>.jumbotron h2 {
  font-size: 1.5em;
  letter-spacing: -1px;
  margin-bottom: 30px;
  text-align: center;
  font-weight: normal;
  color: gray;
}</p>

<p>.container .gray{
  color: gray
}</p>

<p>.container{
  .footer{
    width: 25%;
  }
}</p>

<p>.form-signin {
  max-width: 30%;
  padding: 19px 29px 29px;
  margin: 0 auto 20px;
  margin-top: 20px;
  background-color: @lightGrey;
  border: 1px solid @green;
  -webkit-border-radius: 15px;
  -moz-border-radius: 15px;
  border-radius: 15px;</p>

<pre><code>h2{
  text-align: center;
  margin-top: 0px;
}
</code></pre>

<p>}</p>

<p>.form-signin input[type=&ldquo;text&rdquo;],
.form-signin input[type=&ldquo;password&rdquo;]{
  font-size: 16px;
  height: auto;
  margin-bottom: 15px;
  padding: 7px 9px;
}</p>

<p>```</p>

<p>OK, 回到瀏覽器, 在reflash一次, 應該會出現像樣的登入畫面了</p>

<p>以上就是這一堂課的練習</p>
]]></content>
  </entry>
  
</feed>
