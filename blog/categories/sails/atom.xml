<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sails | 江湖險惡，我從來都不輕易留下我的姓名。]]></title>
  <link href="http://kennytu.github.io/blog/categories/sails/atom.xml" rel="self"/>
  <link href="http://kennytu.github.io/"/>
  <updated>2016-02-19T16:14:57+08:00</updated>
  <id>http://kennytu.github.io/</id>
  <author>
    <name><![CDATA[Kenny Tu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sails Socket.io基本概念 - Rooms and Streams]]></title>
    <link href="http://kennytu.github.io/blog/2015/12/11/sails-socket-dot-io-2/"/>
    <updated>2015-12-11T15:30:30+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/12/11/sails-socket-dot-io-2</id>
    <content type="html"><![CDATA[<p>好的, 這一篇是接著<strong>stenio123</strong>老大的第二章節, 也就是 <a href="http://impacta.us/sails-with-socket-io-part-24/" target="_blank">part 2 – Sails js Socket.io intermediate – rooms and streams</a></p>

<p>這一篇的練習做完, 大致上就可以掌握sails socket.io的百分之七十的用法了</p>

<p>我們先把程式碼寫一寫</p>

<p>這個程式碼是接續自上一篇, 我們繼續在socket_test的專案下執行</p>

<!--more-->


<pre><code>sails generate controller TeamNews
</code></pre>

<p>然後修改一下檔案</p>

<pre><code class="js api\controllers\TeamNewsController.js">
/**
 * TeamNewsController
 *
 * @description :: Server-side logic for managing Teamnews
 * @help        :: See http://sailsjs.org/#!/documentation/concepts/Controllers
 */

module.exports = {
    index:function (req, res) {
        var teamNames = [{name:'blackhawks'}, {name:'lightning'}];
        var hawks_fans = sails.sockets.subscribers('blackhawks');
        var lightning_fans = sails.sockets.subscribers('lightning');


        res.view({
            teams: teamNames,
            hawksFans: hawks_fans,
            lightningFans: lightning_fans
        });

    },
    broadcastnews: function (req, res) {
        var data = {};
        data.name = req.param("team");
        data.news = req.param("news");

        var rooms = sails.sockets.rooms();
        var hawks = sails.sockets.subscribers("blackhawks");
        var lightning = sails.sockets.subscribers("lightning");

        console.log("Available rooms: " + JSON.stringify(rooms));
        console.log("subscribers hawks: " + JSON.stringify(hawks));
        console.log("subscribers lightning: " + JSON.stringify(lightning));

        sails.sockets.broadcast(data.name, "news", data);
    },
    blastnews: function (req, res) {
        var news = req.param("news");
        sails.sockets.blast('news', news);
    },
    //this is how we keep track of how many sockets each team has in their room,
    joinroomfans: function (req,res) {
        console.log("joining room fans socket id" + req.socket.id);
        sails.sockets.join(req.socket, 'blackhawksFans');
        sails.sockets.join(req.socket, 'lightningFans');
        sails.sockets.broadcast('blackhawksFans', 'updatedblackhawks', sails.sockets.subscribers('blackhawks').length);
        sails.sockets.broadcast('lightningFans', 'updatedlightning', sails.sockets.subscribers('lightning').length);
    },
    //this is how a socket joins room to receive news of their team
    joinroom:function (req,res) {
        var teamName = req.param("teamName");
        sails.sockets.join(req.socket,teamName);
        console.log( 'Socket ' + req.socket.id + 'joined room: ' + teamName);
        //teamName+'Fans' is name of the room, 'updated'+teamName is name of event
        sails.sockets.broadcast(teamName+'Fans', 'updated'+teamName, sails.sockets.subscribers(teamName).length);
    },
    //leave room from team news
    leaveroom:function (req,res) {
        var teamName = req.param("teamName");
        sails.sockets.leave(req.socket,teamName);
        console.log( 'Socket' + req.socket.id + 'left room: ' + teamName);
        //teamName+'Fans' is name of the room, 'updated'+teamName is name of event
        sails.sockets.broadcast(teamName+'Fans', 'updated'+teamName, sails.sockets.subscribers(teamName).length);
    }
};
</code></pre>

<p>接著新增<code>views\teamnews\index.ejs</code></p>

<p>```js views\teamnews\index.ejs</p>

<h1>Sails js with socket io tutorial - part 2</h1>


<p>You can check the tutorial <a href="http://www.impacta.us/blog">here</a>.
<a href="http://kennytu.github.io/user/">Part1 </a> Part2 Part3 Part4</p>

<p><p></p>

<p>&lt;% if (teams) { %>
  <select id="teamNameSelect">
    <option value="0" selected="selected" style="display:none;">Select team</option>
     &lt;% _.each(teams, function(team) {  %>
    <option value="<%=team.name%>&ldquo;>&lt;%=team.name%></option>
    &lt;% }) %>
  </select>
&lt;% } %>
<input type="text" id="news" name="news" placeholder="type team news here"/>
<button id="submit">Submit team news!</button> or <button id="blast">Blast to everyone</button>
</p>
<h3>Subscribe to Chicago Blackhawks news</h3></p>

<h1>of subscribed fans: <div id="blackhawksFans"></div></h1>

<p><br/>
<button id="gohawks">Go Hawks!</button>
<ul id="blackhawks">
</ul>
<button id="nohawks">Unsubscribe to Hawks!</button></p>

<p><h3>Subscribe to Tampa Lightning news</h3></p>

<h1>of subscribed fans: <div id="lightningFans"></div></h1>

<p><br/>
<button id="gotampa">Go Tampa!</button>
<ul id="lightning">
</ul>
<button id="notampa">Unsubscribe to Tampa!</button></p>

<p> <!-- END Page Content -->
&lt;% block(&lsquo;localScripts&rsquo;, &lsquo;<script src="http://kennytu.github.io/view_specific/teamnews_index_misc.js"></script>&rsquo;) %></p>

<pre><code>
再來是`assets\view_specific\teamnews_index_misc.js`
</code></pre>

<p>//when page loads, register this socket to receive notification of new fans(sockets) subscribed
$(document).ready(function () {
    io.socket.post(&lsquo;/teamnews/joinroomfans/&rsquo;, {});
});</p>

<p>/<em>* event handling for Fan room </em>/
io.socket.on(&lsquo;updatedblackhawks&rsquo;, function (response) {
    console.log(&ldquo; fan response is &rdquo; + JSON.stringify(response));
    $(&ldquo;#blackhawksFans&rdquo;).html(response);
});
io.socket.on(&lsquo;updatedlightning&rsquo;, function (response) {
    console.log(&ldquo; fan response is &rdquo; + JSON.stringify(response));
    $(&ldquo;#lightningFans&rdquo;).html(response);
});</p>

<p>//adds listener and what to do once receives event notification
io.socket.on(&lsquo;news&rsquo;, function (response) {
    console.log(&ldquo;response is &rdquo; + JSON.stringify(response));
    //if it is a sails.socket.broadcast
    if (response.name) {
        if (response.name === &lsquo;blackhawks&rsquo;) {
            $(&ldquo;#blackhawks&rdquo;).append(&lsquo;<li>&rsquo; + response.news + &lsquo;</li>&rsquo;);
        } else {
            if (response.name === &lsquo;lightning&rsquo;) {
                $(&ldquo;#lightning&rdquo;).append(&lsquo;<li>&rsquo; + response.news + &lsquo;</li>&rsquo;);
            }
        }
        //if it is sails.socket.blast
    } else {
        $(&ldquo;#blackhawks&rdquo;).append(&lsquo;<li>&rsquo; + response + &lsquo;</li>&rsquo;);
        $(&ldquo;#lightning&rdquo;).append(&lsquo;<li>&rsquo; + response + &lsquo;</li>&rsquo;);
    }
})</p>

<p>//subscribes to Blackhawks messages (code on TeamNewsController.subscribe)
$(&ldquo;#gohawks&rdquo;).click(function () {
    io.socket.post(&lsquo;/teamnews/joinroom/&rsquo;, {teamName: &lsquo;blackhawks&rsquo;});
    alert(&ldquo;subscribed to Hawks news!&rdquo;);
});
//unsubscribes to Blackhawks messages (code on TeamNewsController.subscribe)
$(&ldquo;#nohawks&rdquo;).click(function () {
    io.socket.post(&lsquo;/teamnews/leaveroom/&rsquo;, {teamName: &lsquo;blackhawks&rsquo;});
    alert(&ldquo;unsubscribed to Hawks news!&rdquo;);
});</p>

<p>//subscribes to Lightning messages (code on TeamNewsController.subscribe)
$(&ldquo;#gotampa&rdquo;).click(function () {
    io.socket.post(&lsquo;/teamnews/joinroom/&rsquo;, {teamName: &lsquo;lightning&rsquo;});
    alert(&ldquo;subscribed to Lightning news!&rdquo;);
});
//unsubscribes to Lightning messages (code on TeamNewsController.subscribe)
$(&ldquo;#notampa&rdquo;).click(function () {
    io.socket.post(&lsquo;/teamnews/leaveroom/&rsquo;, {teamName: &lsquo;lightning&rsquo;});
    alert(&ldquo;unsubscribed to Lightning news!&rdquo;);
});</p>

<p>$(&ldquo;#submit&rdquo;).click(function () {
    if ($(&ldquo;#teamNameSelect&rdquo;).val() != &ldquo;0&rdquo;) {
        io.socket.post(&lsquo;/teamnews/broadcastnews/&rsquo;, {
            team: $(&ldquo;#teamNameSelect&rdquo;).val(),
            <a href="news:">news:</a> $(&ldquo;#news&rdquo;).val()
        });
    } else {
        alert(&ldquo;please select team!&rdquo;);
    }
});</p>

<p>$(&ldquo;#blast&rdquo;).click(function () {
    io.socket.post(&lsquo;/teamnews/blastnews/&rsquo;, {
        <a href="news:">news:</a> $(&ldquo;#news&rdquo;).val()
    });</p>

<p>});</p>

<pre><code>
最後修改一下`config\routes.js`, 將首頁設定成TeamNews的index
</code></pre>

<p> &lsquo;/&rsquo;:{
        controller: &lsquo;TeamNews&rsquo;,
        action: &lsquo;index&rsquo;
     }</p>

<p>```</p>

<p>OK, 大功告成.</p>

<p>存檔, 從新啟動sails.</p>

<pre><code>sails lift
</code></pre>

<p>然後在瀏覽器輸入localhost:1337</p>

<p>就可以開始來玩玩看嚕!</p>

<p>記得開啟瀏覽器的除錯模式(例如firefox的firebug)</p>

<p>觀察前端以及後端的log</p>

<h3>參考資料</h3>

<ul>
<li><a href="http://sailsjs.org/documentation/reference/web-sockets/socket-client" target="_blank">Socket Client (sails.io.js)</a></li>
<li><a href="http://sailsjs.org/documentation/concepts/controllers/generating-controllers" target="_blank">Generating controllers</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails Socket.io基本概念 - Watch and Subscribe]]></title>
    <link href="http://kennytu.github.io/blog/2015/12/10/sails-socket-dot-io/"/>
    <updated>2015-12-10T11:09:01+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/12/10/sails-socket-dot-io</id>
    <content type="html"><![CDATA[<p>OK, 由於Irl先生接下來會用到socket.io, 整合到activityOverlord專案中</p>

<p>因為Irl先生是用舊版的Sails, 也就是Sails 0.9的, 而在Sails 0.11之後, sails對於socket.io的支援改動滿大的</p>

<p>所以我就上網找了一些相容於sails 0.11的專案來練習</p>

<p>先講幾個用法上的觀念</p>

<ol>
<li>Sails已經將socket.io整合進自己的架構, 你可以在<code>assets\js\dependencies\</code>找到<code>sails.io.js</code>這個檔案, 這個檔案就是socket.io的精隨了</li>
<li>Sails將socket.io的使用整合進它自己的MVC架構, 也就是說, 我們在操控socket.io這些方法的時候, 大部分是在Controller這邊處理, 我們會在後面的例子中談到</li>
<li>Sails針對socket.io的用法有提供socket.io模式的Method,也有提供Sails本身Data Module的Method, 看你要用哪一種</li>
</ol>


<!--more-->


<p>以上幾個觀念, 詳細請參考<a href="http://sailsjs.org/documentation/reference/web-sockets/socket-client" target="_blank">Socket Client (sails.io.js)</a>, 老實說文件寫得有夠精簡的&hellip;. 看完也不知道怎麼用</p>

<p>好的, 接下來我們用例子來讓大家有感覺</p>

<p>本篇的實作是參考<strong>stenio123</strong>大哥的專案, 他的專案程式碼都放在他的Github, 請參考 <a href="https://github.com/stenio123/sails-socket-example" target="_blank">sails-socket-example</a></p>

<p>他也有寫了一個網誌來教學, 請看 <a href="http://impacta.us/sails-with-socket-io-part-14/" target="_blank">Sails with socket.io</a>, 不過他好像只寫了前兩篇, 後兩篇就沒著落了.</p>

<p>讓我們開始, 先建立一個Sails專案</p>

<pre><code>sails new socket_test

cd socket_test
</code></pre>

<p>先試試看可不可以Run</p>

<pre><code>sails lift
</code></pre>

<p>開啟瀏覽器, 輸入<code>localhost:1337</code> 看看結果</p>

<p>注意! 你在執行sails lift的時候有可能會發生缺少什麼module, 請看我上一篇網誌<strong>NPM的怪問題</strong>獲得可能的解答</p>

<p>第一次執行的時候, Sails會問你關於資料庫的存取問題, 到<code>config</code>目錄下的<code>models.js</code>, 把<code>migrate</code>改成 <code>'safe'</code>即可</p>

<p>OK, 沒問題的話, 接下來就開始來寫Code了</p>

<pre><code>socket_test&gt; sails generate api User
</code></pre>

<p>Sails會幫我們在<code>api</code>目錄下的<code>controllers</code>以及<code>models</code>這兩個目錄下, 產生相對應的檔案</p>

<p>我們先修改<code>api\controllers\UserController.js</code>, 把裡面的東西全刪掉, 將下面的程式複製貼上</p>

<pre><code class="js UserController.js">
module.exports = {
    watchUser: function (req, res) {
        // watch for new User instances
        User.watch(req.socket);
        console.log('User watching ' + req.socket.id);
    },
    subscribeUser: function (req, res) {
        // subscribe client to model changes
        User.subscribe(req.socket);
        console.log('User subscribed to ' + req.socket.id);
    },
    createpub: function (req, res) {
        var data_from_client = req.params.all();

        if (req.isSocket &amp;&amp; req.method === 'POST') {
            User.create(data_from_client)
                .then(function (data_from_client) {
                    console.log(data_from_client);
                    User.publishCreate({id: data_from_client.id, name: data_from_client.name});
                })
                .catch(function (err) {
                    console.log('Error creating new User. Error: ' + err);
                    return res.serverError('Server encountered a problem. Please contact administrator.');
                });
        }
        else {
            return res.badRequest('Sorry, this endpoint only accessible via sockets.');
        }
    },
    index: function (req, res) {
        res.view({
            welcomeMessage: 'Welcome to Sails + socket.io simple test. Please refrain from adding client logic on the server!'
        });
    }

};
</code></pre>

<p>接著, 我們到<code>views</code>底下新增一個<code>user</code>的目錄, 在<code>user</code>目錄新增一個<code>index.ejs</code>的檔案</p>

<p>```js views\user\index.ejs</p>

<p>&lt;%= welcomeMessage %>
<br/></p>

<p>
    <input type="text" id="name">
    <button id="go-data">Submit!</button>
</p>


<p><br/></p>

<ul id="user-list">
</ul>


<p>&lt;% block(&lsquo;localScripts&rsquo;, &lsquo;<script src="http://kennytu.github.io/view_specific/user_index_misc.js"></script>&rsquo;) %></p>

<pre><code>
這個程式碼解釋一下, Sails有提供layout, partial and block template functions for the EJS template engine. 

其實就是express 3.x然後使用ejs-local的範本(因為sails就是架構在express上面的呀)

其中`&lt;% block ... %&gt; `, 裡面的意思是說, 這個local的javasript, 就只有給這個index.ejs用, 不會被其他的網頁包含

這個技巧在動態網頁互動很常使用到, 所以可以學習一下

要很注意的是, 我在`&lt;% block` 這個標籤, 並沒有加上 **-** 這個, 

也就是說, 我沒有用`&lt;%- block ... %&gt; `這個加上**-**的方式, 網路上有不少人都會加上這個dash sign, 但這會造成一些錯誤, 我們會在附錄中解說

但在sails的使用上, 我們還得注意到另外一個地方, 若要使用這個`&lt;% block ... %&gt; `標籤, 我們需要去修改`layout.ejs`

在`&lt;!--SCRIPTS END--&gt;`下面, 加上一段話, 程式碼如下
</code></pre>

<pre><code>&lt;!--SCRIPTS--&gt;
&lt;script src="http://kennytu.github.io/js/dependencies/sails.io.js"&gt;&lt;/script&gt;
&lt;script src="http://kennytu.github.io/js/dependencies/jquery-1.11.1.min.js"&gt;&lt;/script&gt;
&lt;!--SCRIPTS END--&gt;
&lt;%- blocks.localScripts %&gt;
</code></pre>

<p>  </body>
</html></p>

<pre><code>
注意到我們在`&lt;!--SCRIPTS END--&gt;`下加入了`&lt;%- blocks.localScripts %&gt;` 

簡單介紹一下layout.ejs, 被`&lt;!--SCRIPTS--&gt;`和`&lt;!--SCRIPTS END--&gt;`包住的這兩行程式碼, 是Sails自動產生的,

Sails會根據我們放在`assets\js\dependencies`裡面的檔案, 把這些檔案的檔名掃描進來, 放到`&lt;!--SCRIPTS--&gt;`和`&lt;!--SCRIPTS END--&gt;`中間

那你會想說, 如果我的javascript有先後順序的話, 我要怎麼調整順序呢?

請到`tasks\pipeline.js`, 找到`jsFilesToInject`這個區段, 參考底下
</code></pre>

<p>// Client-side javascript files to inject in order
// (uses Grunt-style wildcard/glob/splat expressions)
var jsFilesToInject = [</p>

<p>  // Load sails.io before everything else
  &lsquo;js/dependencies/sails.io.js&rsquo;,</p>

<p>  // Dependencies like jQuery, or Angular are brought in here
  &lsquo;js/dependencies/<em>*/</em>.js&rsquo;,</p>

<p>  // All of the rest of your client-side js files
  // will be injected here in no particular order.
  &lsquo;js/<em>*/</em>.js&rsquo;,</p>

<p>  // Use the &ldquo;exclude&rdquo; operator to ignore files
  // &lsquo;!js/ignore/these/files/*.js&rsquo;
];</p>

<pre><code>若要更改順序, 就把你想要的javascript按照寫在這邊, 就可以了, 上面的說明應該滿清楚的

好的, views/user/index.ejs完成之後, 我們要來處理Client端的介面

到`assets`這個路徑下, 新增一個`view_specific`的目錄, 然後在此目錄下新增`user_index_misc.js`這個檔案

檔案內容如下
</code></pre>

<p>//sends this socket id so it can be subscribed at the controller
io.socket.get(&lsquo;/user/watchUser&rsquo;, function(resData, jwres) {
    console.log(resData);
});</p>

<p>//adds listener and what to do once receives event notification
io.socket.on(&lsquo;user&rsquo;,function(obj){
    //if(obj.verb ===&lsquo;created&rsquo;){
    console.log(&lsquo;chat event is &rsquo;+ JSON.stringify(obj));
    $(&ldquo;#user-list&rdquo;).append(&lsquo;<li>&rsquo; + obj.data.name + &lsquo;</li>&rsquo;);
});</p>

<p>$(&ldquo;#go-data&rdquo;).click( function() {
    io.socket.post(&lsquo;/user/createpub/&rsquo;,{name:$(&ldquo;#name&rdquo;).val()});
    $(&ldquo;#name&rdquo;).val(&ldquo;&rdquo;);
});</p>

<pre><code>
新增完成之後, 最後一件事情就是, 將Jquery放到`assets\js\dependencies\`

也就是上去Jquery的網站, 去下載Jquery的檔案, 1.x版本或者2.x版都可以

例如我這邊就是`assets\js\dependencies\jquery-1.11.1.min.js`

下載完放好之後, 你就會在layout.ejs裡面看到sails已經將jquery-1.11.1.min.js放進去了

OK, 事前準備終於完成了

啊! 還有一個要改, 就是首頁的Route

到`config\routes.js`, 把`view: 'homepage'`拿掉, 改成以下
</code></pre>

<pre><code>'/':{
    controller: 'User',
    action: 'index'
}
</code></pre>

<p>```</p>

<p>這樣就確保我們的首頁就是User底下的index了</p>

<p>現在, 執行以下指令</p>

<pre><code>sails lift
</code></pre>

<p>開啟瀏覽器, 輸入localhost:1337</p>

<p>會出現一個讓我們輸入client的畫面, 我們使用firefox的firebug開啟除錯視窗, 然後觀察輸出的訊息 (也要觀察後台的訊息唷)</p>

<p>若沒有問題的話, 這就是我們stenio123大哥的第一部分的示範</p>

<h2>附錄</h2>

<p>上面提到Sails有提供layout, partial and block template functions for the EJS template engine.</p>

<p>然後提到<code>&lt;%- block ... %&gt;</code>這個加上<strong>-</strong>的方式</p>

<p>這邊有個觀念是, 在ejs中, 若使用 <code>&lt;%-</code>這個有dash符號的, 那麼ejs就會去執行被<code>&lt;%-</code>包含起來的javascript程式碼. 專業一點的說法就是, 我們可以藉由這個<code>&lt;%-</code>符號, 來注入(inject)我們的javascript的程式碼.</p>

<p>另外一方面, 為什麼提到上述我們在使用<code>&lt;% block</code>這個tag的時候, 不能加dash呢? 是因為若我們使用了<code>&lt;%- block</code>, ejs會做兩次動作, 第一次是先執行要注入的程式碼, 也就是在<code>&lt;%- block</code>包含的javascript, 然後, 將此段javascript轉為此頁面的一部分, 結果, 當瀏覽器執行到此javascript的時候, 又會在執行一次, 結果造成了執行兩次的誤動作.</p>

<p>這樣會有什麼問題呢?</p>

<p>一個問題就是, 當ejs在執行第一次的注入javascript的時候, 若這個javascript有相依其他的javascript, 例如JQuery的時候, 它會發生找不到相依的錯誤, 直到第二次, 當瀏覽器依照正確的順序將相依的javascript匯入的時候, 第二次執行就沒有問題&hellip;</p>

<p>以上的討論可以參考 <a href="http://stackoverflow.com/questions/22112763/sails-js-how-to-inject-a-js-file-to-a-specific-route" target="_blank">Sails.js - How to inject a js file to a specific route?</a> 這個討論串</p>

<p>另外, 關於EJS的一些概念, 請參考底下網站</p>

<ul>
<li><p><a href="http://www.embeddedjs.com/getting_started.html" target="_blank">Getting Started with EJS</a></p></li>
<li><p><a href="http://blogger.gtwang.org/2014/02/ejs-embedded-javascript.html" target="_blank">EJS：Client 端嵌入式（Embedded）JavaScript</a></p></li>
<li><p><a href="http://ccc.nqu.edu.tw/wd.html#wp:ejs" target="_blank">ejs 樣板引擎</a></p></li>
<li><p><a href="http://www.embeddedjs.com/screencast/index.html" target="_blank">Clean AJAX with EJS</a></p></li>
</ul>


<h2>Sails不錯的簡報</h2>

<ul>
<li><a href="http://www.slideshare.net/stenio123/sails-js-intro-impactaus" target="_blank">ails-js-intro-impactaus</a>, 第21頁, 很棒的介紹!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NPM的怪問題]]></title>
    <link href="http://kennytu.github.io/blog/2015/12/09/npm-weird-issue/"/>
    <updated>2015-12-09T20:13:55+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/12/09/npm-weird-issue</id>
    <content type="html"><![CDATA[<p>好的, 這篇我要來好好的念一下NPM, 也就是 package manager for node.js</p>

<p>這真的太令我生氣啦!!!</p>

<p>如果你是用<strong>WIN7</strong>&hellip; 對! 就是<strong>WIN7</strong>, 你可能會遇到底下我遇到的問題</p>

<p>當你去了官網 <a href="https://nodejs.org/en/">nodejs.org</a> 下載Windows的安裝包, 安裝完成之後, 通常<code>npm</code>都會一起被安裝進去了</p>

<p>這個時候你開啟<code>cmd</code>, 輸入<code>node</code>或者<code>npm</code>, 應該都已經可以執行</p>

<!--more-->


<p>好的, 然後你就用了一段時間, 使用<code>npm install -g</code>巴拉巴拉 用的很高興</p>

<p>突然間, 你看到網路上, 欸! 有<code>node.js</code>以及<code>npm</code>的<strong>更新</strong>耶, 超爽Der</p>

<p>你就順手的打開<code>cmd</code>, 輸入<code>npm update -g</code></p>

<p>然後<code>npm</code>跑了好一段時間來update&hellip;.</p>

<h2>接著..噩夢從此開始&hellip;</h2>

<p>你開心地覺得有更新版的可用真好</p>

<p>然後阿</p>

<p>你又在node.js找到一些想要用的module, OK</p>

<p>馬上來玩玩看! 使用 <code>npm install 巴拉巴拉 -g</code></p>

<p>疑!? ERROR!?</p>

<p>蛤!!?!? 簡單的裝個npm install 套件, 居然會ERROR?!!?</p>

<p>大概類似出現底下這樣,</p>

<p><code>npm err windows_nt 6.1.7601</code></p>

<p>然後還有什麼&hellip;</p>

<p><code>Error: EXDEV, cross-device link not permitted</code></p>

<p>OK, 你開始找問題, 上網搜尋了一堆, 大家好像也都遇到奇怪的問題</p>

<p>然後還會亂給建議&hellip;</p>

<p>沒辦法! 真的沒頭緒, 只能一個個Try&hellip;</p>

<p>不管如何Try, 你會發現這個ERROR出現的太詭異了&hellip;</p>

<p>找啊找的.. 真的完全沒頭緒</p>

<p>你快瘋了&hellip;</p>

<h2>就這樣, 突然靈光一閃</h2>

<p>好的, 遇到一些奇怪的問題時, 真的沒辦法解, 你會想要怎麼做?</p>

<p>對, 使用<strong>Clean Room</strong>的環境!!!</p>

<p>先解釋什麼叫做<code>Clean Room</code>, <code>Clean Room</code>就是在乾淨的地方, 重新做一次實驗</p>

<p>我想到, 假如我安裝個模組就出現一堆ERROR, 那node.js release manager不就是要去吃&hellip;嗎!!</p>

<p>當然他不會吃&hellip;! 他一定會做好完整的測試才會Release對吧!?</p>

<p>OK, 所以呢, 接下來, 我執行了</p>

<ol>
<li><code>npm cache clean -f</code> (npm還會跳出一個警告視窗說: 你確定你知道你要做的是什麼對吧?)</li>
<li><code>npm install -g</code> (重裝一次)</li>
</ol>


<p>好的, 沒用!</p>

<p><strong>Fuxxxxk!</strong></p>

<h2>突然間, 又靈光一閃</h2>

<p><code>npm cache clean</code> 真的有完全清除嗎!?</p>

<p>我就到了<code>C:\Users\KennyTu\AppData\Roaming</code>目錄下的<code>npm-cache</code>去看, 執行完clean之後, 這個目錄的東西完全沒動到阿!</p>

<p>為什麼我會知道要去這個<code>C:\Users\KennyTu\AppData\Roaming</code>目錄呢, 你就執行</p>

<p><code>npm config get prefix</code>, npm就會return它把安裝的東西放到哪邊去了</p>

<p>哈哈哈哈~~~</p>

<p>好的, 最後我怎麼做呢?</p>

<h2>最終解法</h2>

<p>不囉嗦, 照著底下做</p>

<ol>
<li>從windows的新增移除程式, 移除node.js以及相關的套件(如果有的話)</li>
<li>到<code>C:\Users\KennyTu\AppData\Roaming</code>把<code>npm-cache</code>以及<code>npm</code>這兩個目錄幹掉!</li>
<li>重開機</li>
<li>重新從<a href="https://nodejs.org/en/">nodejs.org</a> 下載Windows的安裝包, 安裝一次</li>
<li>大功告成!</li>
</ol>


<p>對, 就是這樣</p>

<p>為什麼會有這樣的問題呢!?</p>

<p>起因就是在於, 新版和舊版的npm對於路徑的設定不同, 然後又不向下相容, 所以就會導致新的npm要去找某個路徑, 發現他找不到!?</p>

<p>舉個例子, 新版npm在安裝沒有安裝過的模組的時候, 需要 <code>超機車的耶</code> 這個套件, 然後npm發現cache裡面已經有 <code>超機車的耶</code> 這個套件, 但是這個 <code>超機車的耶</code> 這個套件是舊的npm裝的, 有些路徑設定在新版的npm沒有, 然後呢, 新版的npm就很高興的去 <code>超機車的耶</code> 這個cache裡面找他要的一些資訊&hellip;. 欸!!? 沒有找到!? 怎麼可能!!? 幹! 報錯給使用者了啦! 老子不爽裝了啦!!!</p>

<p>好的, 就是這樣, 這也是為什麼我們要把前朝的npm所遺留下來的cache清掉的原因&hellip;.</p>

<h2>提醒Windows用戶的注意事項</h2>

<p>所以呢, 總結一下經驗法則</p>

<ol>
<li><strong>他X的千萬不要在console中, 使用npm update -g</strong>, 你會死掉</li>
<li><strong>如果你不小心手癢了! 請照上述的最終解法重來一遍吧</strong></li>
</ol>


<p>OK, 附帶一提</p>

<h3>新版sails的問題</h3>

<p>當你把npm修好之後, 使用<code>npm install -g sails</code> 安裝成功</p>

<p>使用<code>sails new testProj</code></p>

<p>then <code>cd testProj</code></p>

<p>Run <code>sails lift</code></p>

<p>你會發現幹~ 怎麼不能RUN, 報錯呢!!! 靠杯</p>

<p>好的, 自力自強, 看error log, 是說找不到什麼洨的套件</p>

<p>就安裝他吧! 例如他靠杯說少了<code>基八毛</code>套件</p>

<p>那就是<code>npm install -g 基八毛</code></p>

<p>裝到Global安裝目錄去!</p>

<p>接著看<code>sails lift</code> 報什麼洨 她找不到的, 就通通滿足她!</p>

<p>裝飽之後~</p>

<p><code>sails lift</code> 就可以正常執行啦!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails練習之十四 - Hacker: 修改前端程式碼立馬變成Admin]]></title>
    <link href="http://kennytu.github.io/blog/2015/12/07/sails-study14/"/>
    <updated>2015-12-07T13:51:19+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/12/07/sails-study14</id>
    <content type="html"><![CDATA[<p>在之前的章節, Ira展示了如何區分管理者和一般使用者. 然而有些網友, 指出了一些漏洞, 讓我們可以直接修改前端程式碼, 就可以獲得管理者的權限.</p>

<p>影片在這邊: <a href="https://www.youtube.com/watch?v=TgiK34eDGOU" target="_blank">Building a Sails Application: Ep17a - Marshalling request parameters</a></p>

<p>好的, 主要的概念是這樣, 開啟瀏覽器, 使用一般使用者登入, 進入修改頁面(Edit), 然後用firefox的firebug開啟除錯模式, 將admin的checkbox加進去html裡面, 並且將checkbox勾選起來, 最後按下proceed!</p>

<p>你就會發現, 一般使用者突然間就會變成管理員嚕! 超High的!</p>

<!--more-->


<p>問題的發生點是在UserController.js的<code>update</code> action</p>

<p>我們在update的時候, 呼叫底下這一行</p>

<pre><code class="js  UserController.js的update">
 User.update(req.param('id'), req.params.all, function userUpdated(err)
</code></pre>

<p>其中第二個參數是取用所有來自req的參數, 所以這就讓我們可以使用insert admin的技巧來奪取管理員權限了</p>

<p>所以我們修改如下</p>

<pre><code class="js UserController.js update">
update: function (req, res, next) {
        if(values.admin != undefined &amp;&amp; values.admin.constructor === Array){
            if(values.admin[1] === 'on'){
                values.admin = true;
            }
        }

        var userObj = {
            name: req.param('name'),
            title: req.param('title'),
            email: req.param('email')
        }

        if(req.session.User.admin){
            userObj.admin = values.admin;
        }

        //replace req.params.all with userObj
        User.update(req.param('id'), userObj, function userUpdated(err) {
            if (err) {
                return res.redirect('/user/edit/' + req.param('id'));
            }

            res.redirect('/user/show/' + req.param('id'));
        });
    },
</code></pre>

<p>OK, 主要是我們去檢查這個Session的使用者是否一剛開始的Session就是Admin, 是的話我們才去設定Admin的屬性</p>

<p>除了Edit頁面, 我們要在Create的頁面也要設下檢查條件</p>

<pre><code class="js UserController.js create action">
create: function (req, res, next) {

        var userObj = {
            name: req.param('name'),
            title: req.param('title'),
            email: req.param('email'),
            password: req.param('password'),
            confirmation: req.param('confirmation')
        }

        //replce req.params.all with userObj
        User.create(userObj, function userCreated(err, user) {
            //if(err) return next(err);
            ...
</code></pre>

<p>存檔, 重新啟動sails, 大功告成啦~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails練習之十三 - 區分管理者和一般使用者]]></title>
    <link href="http://kennytu.github.io/blog/2015/12/04/sails-study13/"/>
    <updated>2015-12-04T19:57:17+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/12/04/sails-study13</id>
    <content type="html"><![CDATA[<p>本篇的Video在<a href="https://www.youtube.com/watch?v=DI85AWW_TEk" target="_blank">Building a Sails Application: Ep17 - Creating a distinction between admin and regular users.</a></p>

<p>這一章我在實作的時候遇到了很多問題, 尤其是前端使用者的Edit頁面, 將Admin打勾傳送到後端, 卻發生admin始終都是false的狀況.</p>

<p>看了網路上不少文章, 我把我自己的解法以及網路上的解法還有參考網站都列在本篇文章中</p>

<p>OK, 讓我們開始.</p>

<p>在<code>activeityOverload\api\models\User.js</code>新增<code>admin</code>的<code>attribute</code></p>

<!--more-->


<pre><code class="js User.js">
attributes: {
        name: {
            type: 'string',
            required: true
        },

        title: {
            type: 'string'
        },

        email: {
            type: 'email',
            required: true,
            unique: true
        },

        admin: {
            type: 'boolean',
            defaultsTo: false
        },

        encryptedPassword: {
            type: 'string'
        },

        toJSON: function () {
            var obj = this.toObject();
            delete obj.password;
            delete obj.confirmation;
            delete obj.encryptedPassword;
            delete obj._csrf;
            return obj;
        }
    },
</code></pre>

<p>注意到admin的defaultsTo是false, 你可以先設定為True, 然後執行sails先新增一個使用者, 讓他預設有admin的權限, 之後再改回來false.</p>

<p>接著到<code>SessionController.js</code>, 在<code>create</code>action中加入底下幾行</p>

<pre><code class="js SessionController.js">
// If the user is also an admin redirect to the user list (e.g. /views/user/index.ejs)
// This is used in conjunction with config/policies.js file
if (req.session.User.admin) {
    res.redirect('/user');
    return;
}

//Redirect to their profile page (e.g. /views/user/show.ejs)
res.redirect('/user/show/' + user.id);
</code></pre>

<p>然後, 在<code>activeityOverload\api\policies\</code>目錄下新增一個<code>admin.js</code>的policies, 內容如下</p>

<pre><code class="js admin.js">
/**
 * Allow any authenticated user.
 */
module.exports = function (req, res, ok) {

    // User is allowed, proceed to controller
    if (req.session.User &amp;&amp; req.session.User.admin) {
        return ok();
    }

    // User is not allowed
    else {
        var requireAdminError = [{name: 'requireAdminError', message: 'You must be an admin.'}]
        req.session.flash = {
            err: requireAdminError
        }
        res.redirect('/session/new');
        return;
    }
};
</code></pre>

<p>接著, 開啟<code>activeityOverload\config\policies.js</code>, 新增底下</p>

<pre><code class="js config\policies.js">
'*': 'flash',
    user:{
        'new': "flash",
        'create': "flash",
        '*': "admin"
    }
</code></pre>

<p>OK, 存檔, 從新啟動sails, 看看登入畫面. 登入的時候出現你需要是admin的權限才能進入, 這不是我們想要的</p>

<p>所以我們回頭再修改policy,</p>

<p>我們要在<code>activeityOverload\api\policies\</code>再新增一個<code>userCanSeeProfile.js</code>的Policy, 內容如下</p>

<pre><code class="js userCanSeeProfile.js">
/**
 * Allow a logged-in user to see, edit and update her own profile
 * Allow admins to see everyone
 */

module.exports = function (req, res, ok) {

    var sessionUserMatchesId = req.session.User.id === req.param('id');
    var isAdmin = req.session.User.admin;

    // The requested id does not match the user's id,
    // and this is not an admin
    if (!(sessionUserMatchesId || isAdmin)) {
        var noRightsError = [{name: 'noRights', message: 'You must be an admin.'}]
        req.session.flash = {
            err: noRightsError
        }
        res.redirect('/session/new');
        return;
    }

    ok();

};
</code></pre>

<p>回頭修改<code>activeityOverload\config\policies.js</code></p>

<pre><code class="js config\policies.js">
  '*': 'flash',
    user:{
        'new': "flash",
        'create': "flash",
        'show': "userCanSeeProfile",
        edit:   "userCanSeeProfile",
        update: "userCanSeeProfile",
        '*': "admin"
    }
</code></pre>

<p>存檔, 從新啟動sails, 應該就可以正常登入了</p>

<p>正常登陸之後, 我們會發現就算不是Admin的使用者也是可以看到頭導航欄的<code>User Administration</code>的按鈕, 我們想要修改一下</p>

<p>到layout.ejs,</p>

<pre><code class="js layout.ejs">
&lt;/head&gt;

  &lt;body&gt;

  &lt;div class="navbar navbar-inverse navbar-fixed-top"&gt;
      &lt;div class="container"&gt;
          &lt;div class="navbar-header"&gt;
              &lt;button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse"&gt;
                  &lt;span class="icon-bar"&gt;&lt;/span&gt;
                  &lt;span class="icon-bar"&gt;&lt;/span&gt;
                  &lt;span class="icon-bar"&gt;&lt;/span&gt;
              &lt;/button&gt;
              &lt;a class="navbar-brand" href="http://kennytu.github.io/"&gt; activityOverlord&lt;/a&gt;
          &lt;/div&gt;
          &lt;div class="navbar-collapse collapse"&gt;
              &lt;ul class="nav navbar-nav"&gt;
                  &lt;% if (session.authenticated) { %&gt;
                  &lt;li class="active"&gt;&lt;a href="http://kennytu.github.io/user/show/&lt;%= session.User.id %&gt;"&gt;&lt;%= session.User.name %&gt; &lt;/a&gt; &lt;/li&gt;
                  &lt;% } %&gt;
                  &lt;% if (session.authenticated &amp;&amp; session.User.admin) { %&gt;
                  &lt;li&gt;&lt;a href="http://kennytu.github.io/user"&gt;User Administration&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href="#"&gt;Placeholder2&lt;/a&gt;&lt;/li&gt;
                  &lt;% } %&gt;
              &lt;/ul&gt;
              &lt;div class="navbar-right"&gt;
                  &lt;% if (session.authenticated) { %&gt;
                  &lt;a class="btn btn-default navbar-btn navbar-right" href="http://kennytu.github.io/session/destroy"&gt;sign-out&lt;/a&gt;
                  &lt;% } %&gt;
              &lt;/div&gt;
              &lt;% if (!session.authenticated) { %&gt;
              &lt;form class="navbar-form navbar-right" action="/session/create"&gt;
                  &lt;div class="form-group"&gt;
                      &lt;input type="text" placeholder="Email" name="email" class="form-control"&gt;
                  &lt;/div&gt;
                  &lt;div class="form-group"&gt;
                      &lt;input type="password" placeholder="Password" name="password" class="form-control"&gt;
                  &lt;/div&gt;
                  &lt;button type="submit" class="btn btn-success"&gt;Sign in&lt;/button&gt;
                  &lt;input type="hidden" name="_csrf" value="&lt;%= _csrf %&gt;" /&gt;
              &lt;/form&gt;
              &lt;% } %&gt;
          &lt;/div&gt;
      &lt;/div&gt;
  &lt;/div&gt;

  &lt;%- body %&gt;

 ...
</code></pre>

<p>OK, 存檔, 從新啟動Sails, 就可以了.</p>

<p>好, 接下來, 我們要讓<code>http://localhost:1337/user</code>顯示的頁面有可愛的圖示來區分使用者是Admin還是Regular.</p>

<p>開啟<code>activeityOverload\views\user\index.ejs</code>, 新增以下程式碼</p>

<pre><code class="js views\user\index.ejs">
    ...

    &lt;td&gt;&lt;%= user.title %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= user.email %&gt;&lt;/td&gt;
    &lt;% if(user.admin) { % &gt;
        &lt;td&gt;&lt;img src="http://kennytu.github.io/images/admin.png"&gt;&lt;/td&gt;
    &lt;%} else  { % &gt;
        &lt;td&gt;&lt;img src="http://kennytu.github.io/images/pawn.png"&gt;&lt;/td&gt;
    &lt;%}%&gt;
    &lt;td&gt;&lt;a href="http://kennytu.github.io/user/show/&lt;%= user.id %&gt;" class="btn btn-sm btn-primary"&gt;Show&lt;/a&gt;&lt;/td&gt;

    ...
</code></pre>

<p>另外我們在<code>activeityOverload\views\user\show.ejs</code>也加入可愛的圖示</p>

<p>```js show.ejs</p>

<div class="container">
    <h1><%= user.name %></h1>
    <% if(user.admin) { %>
    <img src="http://kennytu.github.io/images/admin.png"> admin
    <% } else { %>
    <img src="http://kennytu.github.io/images/pawn.png"> pawm
    <% } %>
    <h3><%= user.title %></h3>
    <hr>
    <h3>contact: <%= user.email %></h3>

    <a class="btn btn-medium btn-primary" href="http://kennytu.github.io/user/edit/<%= user.id %>">Edit</a>

</div>


<pre><code>
OK, 接下來要進入本章需要修改的部分, 和本Video的程式碼不同

我們要修改edit.ejs, 讓edit的頁面有admin的check box可供使用者勾選
</code></pre>

<p><form action="/user/update/<%= user.id %>&ldquo; method="POST&rdquo; class=&ldquo;form-signin&rdquo;></p>

<pre><code>&lt;h2&gt; Hey, you're editing a user...&lt;/h2&gt;

&lt;input value="&lt;%= user.name %&gt;" name="name" type="text" class="form-control"/&gt;
&lt;input value="&lt;%= user.title %&gt;" name="title" type="text" class="form-control"/&gt;
&lt;input value="&lt;%= user.email %&gt;" name="email" type="text" class="form-control"/&gt;

&lt;% if (session.authenticated &amp;&amp; session.User.admin) { %&gt;
    &lt;% if (user.admin) { %&gt;
        &lt;input type="hidden" name="admin" value="checkAdmin"&gt;
        &lt;label class="checkbox"&gt;
            &lt;input type="checkbox" name="admin" checked&gt; Admin
        &lt;/label&gt;
    &lt;% } else { %&gt;
        &lt;input type="hidden" name="admin" value="checkAdmin"&gt;
        &lt;label class="checkbox"&gt;&lt;input type="checkbox" name="admin"&gt; Admin&lt;/label&gt;
    &lt;% } %&gt;
&lt;% } %&gt;

&lt;input type="submit" value="Proceed" class="btn btn-lg btn-primary btn-block"/&gt;
&lt;input type="hidden" name="_csrf" value="&lt;%= _csrf %&gt;"/&gt;
</code></pre>

<p></form></p>

<pre><code>
在這邊, 作者把 input type=hidden的name取名為admin, 而input type=checkbox的name也叫做admin

這會有個效果出現, 若使用者**沒有勾選**`checkbox`的話, 則這個form所丟出的update action, `admin`會是一個**只有名叫`checkAdmin`的字串物件**.

但若使用者**有勾選checkbox**的話, 則這個`admin`會是一個`Array`, 第一個是admin的value名稱(也就是checkAdmin), 第二個是checkbox的狀態**'on'**的字串.

##User.js的beforeValidation 改變

接著作者回來修改User.js, 他在程式碼中加入了beforeValidation的function,
這個是sails在對action動作的其中一個life cycle.

在新版本的Sails (我目前的Version為0.11.2), 已經沒有beforeValidation的function了. 名稱修改為`beforeValidate`, 其他的life cycle, 請參考官方網頁 &lt;a href="http://sailsjs.org/documentation/concepts/models-and-orm/lifecycle-callbacks" target="_blank"&gt;Lifecycle callbacks&lt;/a&gt;

在這邊, 作者在程式碼中加入了`beforeValidation`的function,先對`values.admin`做判斷, 理當`values.admin`所帶的值要不是**checkAdmin**的字串物件, 要不就是一個**陣列**(如前所述), 但我在這邊測試的結果, **新版的sails, 在beforeValidate中, values.admin永遠都會是false**!!

也就是說, 若我們要處理values.admin的這個值,若要確保是從網頁那邊過來的第一手原始資料的話, 我們必須從`activeityOverload\api\controllers\UserController.js`的`update`這個action就要開始處倆, 所以我將`User.js`的`beforeValidate`的判斷邏輯移到這邊(也就是將beforeValidate刪除), 底下是程式碼
</code></pre>

<p> update: function (req, res, next) {
        console.log(req.params.all());
        var values = req.allParams();
        console.log(values.admin);</p>

<pre><code>    if(values.admin != undefined &amp;&amp; values.admin.constructor === Array){
        if(values.admin[1] === 'on'){
            values.admin = true;
        }
    }
</code></pre>

<p>&hellip;</p>

<pre><code>
OK, 修改到這邊, 功能大概都完成了, 存檔, 重新啟動sails

就可以玩玩看admin user以及一般regular user的功能了!


##補充:關於Create第一個Admin User
除了上面講的, 在設定User.js的admin attribute的時候, 將defaultsTo: 設定為true, 新增一個admin使用者再改回false之外

還可以使用mongo-express, 進入資料庫, 然後修改user的檔案, 將admin: false 設定為true就可以了. 相當簡單

若沒有admin這個attribute, 就直接在資料庫當中新增一個admin: true, 就可以了!


##補充:關於beforeValidate的更正與修改

一些相關的討論請參考&lt;a href="http://irlnathan.github.io/sailscasts/blog/2013/09/05/building-a-sails-application-ep17-creating-a-distinction-between-admin-and-regular-users/" target="_blank"&gt;Building a Sails Application: Ep17 &lt;/a&gt;

其中有個網友他將解法寫在edit.js, 不用到後端去判斷, 方法如下

1. emove the 'beforeValidation' method from /api/models/User.js
2. add in /views/user/edit.ejs 以下的程式碼
</code></pre>

<p>&lt;% if(session.authenticated &amp;&amp; session.User.admin) { %>
    <input type="hidden" id="admin" name="admin" value="&lt;% user.admin ? 'true' : 'false' %&gt;">
    <label><input type="checkbox" <%="" user.admin="" ?="" 'checked':''="" %=""> onClick=&ldquo;document.getElementById(&lsquo;admin&rsquo;).value = this.checked;&rdquo;> Admin</label>
&lt;% } %></p>

<p>```
大致上就是說, 在前端的ejs就先將admin判斷好, 並且把admin設成true or false, 這樣就可以了.</p>

<h2>參考資料</h2>

<p><a href="http://stackoverflow.com/questions/767486/how-do-you-check-if-a-variable-is-an-array-in-javascript" target="_blank">How do you check if a variable is an array in JavaScript?</a></p>
]]></content>
  </entry>
  
</feed>
