<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sails | 江湖險惡，我從來都不輕易留下我的姓名。]]></title>
  <link href="http://kennytu.github.io/blog/categories/sails/atom.xml" rel="self"/>
  <link href="http://kennytu.github.io/"/>
  <updated>2015-11-17T19:07:25+08:00</updated>
  <id>http://kennytu.github.io/</id>
  <author>
    <name><![CDATA[Kenny Tu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sails練習之二]]></title>
    <link href="http://kennytu.github.io/blog/2015/11/17/sails-study02/"/>
    <updated>2015-11-17T10:54:23+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/11/17/sails-study02</id>
    <content type="html"><![CDATA[<p>本篇是接著Ponzi Coder的這篇</p>

<p><a href="https://www.youtube.com/watch?v=qUAzpyThAB0&index=5&list=PLWsZeJCry-F4K4iRImeB3-i0S5mw9Ak-W" target="_blank">Building a Sails Application: Ep3[UPDATED] - A user model/controller, signup page, sails blueprints</a></p>

<p>裡面為練習內容</p>

<!--more-->


<h2>MVC架構</h2>

<p>Sails有支援MVC架構, 所以若你有想要完成一個概念性的物件, 這個物件有相對的屬性和行為,Sails會將這個物件的屬性放在Modules, 而行為就放在Controller</p>

<p>使用下列的語法來讓Sails自動創建Controller以及Module</p>

<pre><code class="batch">E:\sails_app\activeityOverload&gt;sails generate api user
info: Created a new api!
</code></pre>

<p>PS: 舊版的只要輸入<code>sails generate user</code> 就可以了</p>

<p>這樣Sails會在</p>

<p><code>api\controllers</code> 產生 <code>UserController.js</code></p>

<p><code>api\models</code> 產生 <code>User.js</code></p>

<p>其中,</p>

<p><code>controllers</code>放的是<code>action</code>的邏輯</p>

<p><code>modules</code>裡面放的是<code>attributes</code>的設定</p>

<p>OK, 接著我們來設計User的屬性, 修改 User.js</p>

<pre><code class="js">module.exports = {

  attributes: {
    name:{
        type: 'string',
        required: true
    },

    title:{
        type: 'string'
    },

    email: {
      type: 'email',
      required: true,
      unique: true
    },

    encryptedPassword:{
        type: 'string'
    }
  }
};
</code></pre>

<p>要注意上面的email寫法, sails 0.10以後, type要改成'email'</p>

<p>然後原本的email: true要拿掉</p>

<p>參考<a href="https://github.com/irlnathan/activityoverlord20/issues/13" target="_blank">這裡</a></p>

<p>編輯完成之後, 存檔, 執行 <code>sails lift</code></p>

<p>若是第一次新增api, sails應該會跳出底下的訊息</p>

<pre><code class="batch">E:\sails_app\activeityOverload&gt;sails lift

info: Starting app...

-----------------------------------------------------------------

 Excuse my interruption, but it looks like this app
 does not have a project-wide "migrate" setting configured yet.
 (perhaps this is the first time you're lifting it with models?)

 In short, this setting controls whether/how Sails will attempt to automatically
 rebuild the tables/collections/sets/etc. in your database schema.
 You can read more about the "migrate" setting here:
 http://sailsjs.org/#/documentation/concepts/ORM/model-settings.html?q=migrate

 In a production environment (NODE_ENV==="production") Sails always uses
 migrate:"safe" to protect inadvertent deletion of your data.
 However during development, you have a few other options for convenience:

 1. safe  - never auto-migrate my database(s). I will do it myself (by hand)
 2. alter - auto-migrate, but attempt to keep my existing data (experimental)
 3. drop  - wipe/drop ALL my data and rebuild models every time I lift Sails

What would you like Sails to do?

info: To skip this prompt in the future, set `sails.config.models.migrate`.
info: (conventionally, this is done in `config/models.js`)

warn: ** DO NOT CHOOSE "2" or "3" IF YOU ARE WORKING WITH PRODUCTION DATA **

prompt: ?:  error: Error: The hook `orm` is taking too long to load.
Make sure it is triggering its `initialize()` callback, or else set `sails.config.orm._hookTimeout to a higher value (currently 20000)
    at tooLong [as _onTimeout] (C:\Users\KennyTu\AppData\Roaming\npm\node_modules\sails\lib\app\private\loadHooks.js:92:21)
    at Timer.listOnTimeout (timers.js:89:15)
</code></pre>

<p>既然上面有提示到這個<a href="http://sailsjs.org/documentation/concepts/models-and-orm/model-settings#?migrate" target="_blank">網頁</a>, 我們就去看一下</p>

<p>大意就是說, sails他會做一些策略, 來和我們的資料庫互動, migrate(中文有遷移, 移居的意思), 有三種策略, 分別是safe, alter以及drop, 詳細我就不多說了, 去看網頁寫的很清楚</p>

<p>OK, 接下來我們要做的動作是去修改<code>config/models.js</code></p>

<pre><code class="js">module.exports.models = {

  /***************************************************************************
  *                                                                          *
  * Your app's default connection. i.e. the name of one of your app's        *
  * connections (see `config/connections.js`)                                *
  *                                                                          *
  ***************************************************************************/
  // connection: 'localDiskDb',

  /***************************************************************************
  *                                                                          *
  * How and whether Sails will attempt to automatically rebuild the          *
  * tables/collections/etc. in your schema.                                  *
  *                                                                          *
  * See http://sailsjs.org/#!/documentation/concepts/ORM/model-settings.html  *
  *                                                                          *
  ***************************************************************************/
   migrate: 'safe'

};
</code></pre>

<p>把migrate改成safe, 再重新執行<code>sails lift</code></p>

<p>基本上應該就沒問題可以正常執行了</p>

<p>接下來開啟瀏覽器, 輸入底下網址..</p>

<p>作者在輸入到一半的時候,故意只輸入部分, 來讓我們看一下出錯的效果</p>

<p><code>http://localhost:1337/user/create?name=kenny</code></p>

<p>伺服器回應的結果是:</p>

<pre><code class="js">{
  "error": "E_VALIDATION",
  "status": 400,
  "summary": "1 attribute is invalid",
  "model": "User",
  "invalidAttributes": {
    "email": [
      {
        "rule": "email",
        "message": "`undefined` should be a email (instead of \"null\", which is a object)"
      },
      {
        "rule": "required",
        "message": "\"required\" validation rule failed for input: null"
      }
    ]
  }
}
</code></pre>

<p>大意就是說, email需要輸入</p>

<p>我們再改一個正常的</p>

<p>在瀏覽器輸入URL如下</p>

<p><a href="http://localhost:1337/user/create?name=kennyg&amp;email=i@a.com">http://localhost:1337/user/create?name=kennyg&amp;email=i@a.com</a></p>

<p>注意email不能有用過的, 因為我們將<code>email</code>的其中一個<code>unique</code>的屬性設定為true</p>

<p>若沒有意外, 應該出現如下視窗</p>

<pre><code class="js">{
  "name": "kennyg",
  "email": "i@a.com",
  "createdAt": "2015-11-17T07:19:54.897Z",
  "updatedAt": "2015-11-17T07:19:54.897Z",
  "id": 2
}
</code></pre>

<p>大功告成啦!</p>

<p>注意一點, 我們現在還沒有對<code>UserController.js</code>寫任何邏輯, 以上的行為都是sails系統預設的 :)</p>

<blockquote><p>預設行為都放在blueprints.js下</p></blockquote>

<p>接下來, 我們要開始弄View的東西, 之前Sails幫我們自動生成Module以及Controller,</p>

<p>我們手動在<code>views</code>新增一個資料夾<code>user</code>,然後在<code>user</code>資料夾新增一個檔案名為<code>new.ejs</code>, 新增內容如下</p>

<p>```html</p>

<h1> User signup Form </h1>


<pre><code>
回到`UserController.js`, 在`api\controllers`底下

我們新增以下的code
</code></pre>

<p>module.exports = {
    &lsquo;new&rsquo;: function(req, res){
        res.view();
    }
};</p>

<pre><code>
重新啟動sails, 回到瀏覽器輸入localhost:1337, 按下Sing Up now, 視窗就會跳到new.ejs的page去

還記得嗎? 我們在static底下的index.ejs, button的href是指到/user/new這個action, 所以就會跳到new這邊來了

一般來說, sails會自動幫我們對應action以及底下的檔案, 若要關掉它, 就要去設定

現在我們修改`blueprints.js`, 在`config`底下

找到`rest`, 把他設定成`false`. __記得要把註解拿掉__

參照以下設定

    rest: false,
    shortcuts: false,
    actions: false,


設定好, 存檔, 重新啟動sails 

這時候進入首頁, 按下Sing up now, 我們會被導入404 pages

接著我們就開始手工打造我們的mapping

回到routes.js, 加入底下的code
</code></pre>

<pre><code>'/': {
    view: 'static/index'
},
'/user/new': {
    view: 'user/new'
}
</code></pre>

<pre><code>

從新啟動sails, 再次執行sing up now, 就可以導向到我們的頁面了

另一種routes.js風格的寫法, 如下
</code></pre>

<pre><code>'user/new': {
    controller: "UserController",
    action:"new"
}
</code></pre>

<pre><code>

這樣的寫法我在新版的sails上面都沒有辦法get到頁面, 不知道是不是要明確指定view才行

另外, 有關routes的其他寫法, 請參考&lt;a href="http://sailsjs.org/documentation/concepts/routes/custom-routes" target="_blank"&gt;Custom Routes&lt;/a&gt;的 __Controller / action target syntax__ 章節

&gt; ok, 我們先繼續, 等之後有靈感在回來試試看


現在先將剛剛在routes.js加入的'user/new'這一些敘述都刪掉, 存檔

回到`blueprints.js`, 將`action`改成`true`

然後修改new.ejs, 如底下的程式碼
</code></pre>

<p><form action="/user/create" method="POST" class="form-signin">
  <h2 > Create an account</h2>
  <input type="text" class="form-control" placeholder="your name" name="name">
  <input type="text" class="form-control" placeholder="your title" name="title">
  <input type="text" class="form-control" placeholder="email address" name="email">
  <input type="password" class="form-control" placeholder="password" name="password">
  <input type="password" class="form-control" placeholder="password confirmation" name="comfirmation"></p>

<p>  <input type="submit" class="btn btn-lg btn-primary btn-block" value="Create Account"/>
  <input type="hidden" name="_csrf" value="<%= _csrf %>&ldquo;/></p>

<p></form></p>

<pre><code>
由於new.ejs有用到一些css, 作者也對custom.less做了一些修改

程式碼如下
</code></pre>

<p>@white: #FFFFFF;
@green: #9EC03B;
@orange: #F48744;
@blue: #189ECA;
@gray: #777574;
@darkBlue: #106E8D;
@darkGray: #4A4A4A; // paragraphs
@red: #D16565; // error</p>

<p>body {
  padding-top: 60px;
  padding-bottom: 40px;
}</p>

<p>.jumbotron {
  text-align: center;
}</p>

<p>.jumbotron h2 {
  font-size: 1.5em;
  letter-spacing: -1px;
  margin-bottom: 30px;
  text-align: center;
  font-weight: normal;
  color: gray;
}</p>

<p>.container .gray{
  color: gray
}</p>

<p>.container{
  .footer{
    width: 25%;
  }
}</p>

<p>.form-signin {
  max-width: 30%;
  padding: 19px 29px 29px;
  margin: 0 auto 20px;
  margin-top: 20px;
  background-color: @gray;
  border: 1px solid @green;
  -webkit-border-radius: 15px;
  -moz-border-radius: 15px;
  border-radius: 15px;</p>

<pre><code>h2{
  text-align: center;
  margin-top: 0px;
}
</code></pre>

<p>}</p>

<p>.form-signin input[type=&ldquo;text&rdquo;],
.form-signin input[type=&ldquo;password&rdquo;]{
  font-size: 16px;
  height: auto;
  margin-bottom: 15px;
  padding: 7px 9px;
}</p>

<p>```</p>

<p>OK, 回到瀏覽器, 在reflash一次, 應該會出現像樣的登入畫面了</p>

<p>以上就是這一堂課的練習</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails練習之一]]></title>
    <link href="http://kennytu.github.io/blog/2015/11/16/sails-study01/"/>
    <updated>2015-11-16T11:29:18+08:00</updated>
    <id>http://kennytu.github.io/blog/2015/11/16/sails-study01</id>
    <content type="html"><![CDATA[<p>這一系列的文章, 出自於youtube上的Building a Sails Application教學.</p>

<p>這位仁兄的一系列教學文章都寫得非常好</p>

<p>他的網址在<a href="https://www.youtube.com/watch?v=ep6EQ5f82Ts&index=2&list=PLWsZeJCry-F4K4iRImeB3-i0S5mw9Ak-W" target="_blank">這邊</a></p>

<p>底下分別是他的各個教學章節, 我只是用文字來記錄我的學習過程</p>

<!--more-->


<h2>Building a Sails Application: Ep1 - Installing Sails and Create Initial Project</h2>

<p>OK, 這個章節主要就是教安裝, 你要先安裝好<code>npm</code>, 接下來都好辦了</p>

<p>安裝sails</p>

<p><code>npm install -g sails</code></p>

<p>指令一下去就裝好了. -g是代表安裝到大家都可以存取到的目錄, npm的共用目錄是放在<code>C:\Users\KennyTu\AppData\Roaming\npm</code></p>

<p>你可以用npm config get prefix來取得global的目錄</p>

<p><code>E:\sails_app&gt;npm config get prefix</code></p>

<p>安裝好sails之後, 就可以用sails來create project</p>

<pre><code class="batch">    E:\sails_app&gt;sails new activeityOverload --linker
    info: Created a new Sails app `activeityOverload`!
</code></pre>

<p><code>--linker</code> 的意思是在傳輸的過程啟動壓縮功能, 先讓資料變小, 然後傳輸, 節省網路開銷</p>

<p><strong>但在0.10版本之後, sails就捨棄了linker, 要注意一下</strong></p>

<p>詳情請參考<a href="http://stackoverflow.com/questions/22042260/sails-js-v0-10-create-new-project-linker-not-working-gruntfile-js-not-used" target="_blank">這裡</a></p>

<p>接著啟動sails的serve來看結果
<code>batch
E:\sails_app&gt;cd activeityOverload
E:\sails_app\activeityOverload&gt;sails lift
</code></p>

<pre><code class="batch">info: Starting app...

info:
info:                .-..-.
info:
info:    Sails              &lt;|    .-..-.
info:    v0.11.2             |\
info:                       /|.\
info:                      / || \
info:                    ,'  |'  \
info:                 .-'.-==|/_--'
info:                 `--'-------'
info:    __---___--___---___--___---___--___
info:  ____---___--___---___--___---___--___-__
info:
info: Server lifted in `E:\sails_app\activeityOverload`
info: To see your app, visit http://localhost:1337
info: To shut down Sails, press &lt;CTRL&gt; + C at any time.

debug: --------------------------------------------------------
debug: :: Mon Nov 16 2015 15:24:06 GMT+0800 (台北標準時間)

debug: Environment : development
debug: Port        : 1337
debug: --------------------------------------------------------
</code></pre>

<p>看到以上的訊息之後, 就可以到瀏覽器中輸入 <code>http://localhost:1337</code></p>

<p>就可以看到網頁啦!</p>

<p>好~ 第一課就是這樣囉, 結束</p>

<p>底下是第二課</p>

<h2>Building a Sails Application: Ep2 - Creating a sign-up page, adding twitter bootstrap</h2>

<p>進入到我們剛剛create的資料夾, 也就是activeityOverload, 我們會看到幾個資料夾和檔案</p>

<p>我們先專注在 <code>config/routes.js</code></p>

<p>這個檔案決定使用者個要求如何導向我們設定的資源</p>

<p>詳細的介紹在<a href="http://sailsjs.org/#!/documentation/concepts/Routes/RouteTargetSyntax.html" target="_blank">這邊</a></p>

<p>主要是這個結構</p>

<pre><code class="js">module.exports.routes = {

  '/': {
    view: 'homepage'
  }

};
</code></pre>

<p>這個是說, 根目錄的頁面是呈現主要是view的hompage檔案</p>

<p>所以我們可以在views的目錄下找到homepage.ejs</p>

<p>EJS 是一個 client 端的 JavaScript template library，可以讓整個網頁程式碼結構更清楚、更整潔。有興趣的人可以參考<a href="http://blogger.gtwang.org/2014/02/ejs-embedded-javascript.html" target="_blank">這裡</a></p>

<p>現在呢, 我們要做以下事情</p>

<ol>
<li>在views下create一個資料夾static</li>
<li>在static資料夾下新增index.ejs</li>
</ol>


<p>在index.ejs新增</p>

<p>```html</p>

<h1> this is our homepage </h1>


<pre><code>
回到`config/routes.js` 修改我們的首頁的目錄, 如下
</code></pre>

<p>module.exports.routes = {</p>

<p>  &lsquo;/&rsquo;: {
    view: &lsquo;static/index&rsquo;
  }</p>

<p>};
```</p>

<p>修改完成, 重新啟動sails,</p>

<p><code>sails lift</code></p>

<p>然後到瀏覽器(在這邊我用Firefox)就可以看到結果</p>

<p>在這邊用瀏覽器的觀看原始碼功能, 會看到source code多了很多東西出來</p>

<p>這是因為sails會用layout.ejs (在views底下)</p>

<p>重新幫我們產生出一個頁面出來</p>

<p>為了實驗一下layout.ejs, 我們來修改一下內容</p>

<p>在layout.ejs檔案中, 大約31行開始</p>

<pre><code class="html">    &lt;!--STYLES--&gt;
    &lt;link rel="stylesheet" href="http://kennytu.github.io/styles/bootstrap.css"&gt;
    &lt;link rel="stylesheet" href="http://kennytu.github.io/styles/importer.css"&gt;
    &lt;!--STYLES END--&gt;
</code></pre>

<p>上面那個<code>bootstrap.css</code>是我加的</p>

<p>目的是在於, 我們改用<code>bootstrap.css</code>來重新render(渲染)我們的html元素</p>

<p>也就是我們的<code>index.ejs</code>當中的<code>h2</code>的元素, 會被<code>layout.ejs</code>用<code>bootstrap.css</code>來重新渲染</p>

<p>底下是作法</p>

<ol>
<li>去下載bootstrap, 最新的是bootstrap-3.3.5-dist.zip, 裡面有js, css, fonts</li>
<li>把css下面的bootstrap.css copy 到 sails app 目錄下的 <code>activeityOverload\assets\styles</code></li>
<li>到layout.ejs去新增 styles, 就如同上面的layout.ejs的範例一樣</li>
</ol>


<p>接著就是重新啟動sails, 你會看到首頁的字型變得不太一樣了</p>

<p>在這邊要提到一個目錄, 也就是assets, assets中文是資源的意思, 意思就是你create的任何files都可以放在這個資料夾啦!</p>

<p>當我們把files放到這個assets的目錄時, sails會在啟動的時候, 將底下的檔案copy到要發行的另外一個目錄, 在這邊是<code>.tmp\public\styles</code></p>

<p>OK, 接下來作者就要再次修改主頁了, 修改之前, 他shows出了Gruntfile.js,</p>

<p>看到這邊出現了一個不熟悉的東西, 就上網google了一下</p>

<p>原來grunt是一個前端的建構工具, 他很像C的Make, Java的Ant, Ruby的Rake&hellip;</p>

<p>在前端和Node.js的開發環境中, 就是使用grunt來建置</p>

<p>Grunt是一個Task Runner，常用來執行 JS/CSS 打包壓縮、SASS/LESS/CoffeeScript 編譯、單元測試… 等工作，常被拿來當成前端開發自動化的引擎。</p>

<p>上網study了一下, 發現(2015年)出現了一個比Grunt更好用的Tool, 叫作Gulp</p>

<p>可能作者在出這個教學影片的時候, 還沒有Gulp, 所以就用了Grunt.</p>

<p>但既然已經有了Gulp, 我就來用Gulp來取代Grunt吧(以後啦!)</p>

<p>Sails的官網有教學, 如何把Grunt給DISABLE掉&hellip;請參考<a href="http://sailsjs.org/documentation/concepts/assets/disabling-grunt" target="_blank">官方網站</a></p>

<p>一些gulp的教學文件我列在底下</p>

<p><a href="http://www.oxxostudio.tw/articles/201503/gulp-install-webserver.html" target="_blank">Gulp 學習 1</a></p>

<p><a href="http://www.jianshu.com/p/3779f708f5d7" target="_blank">Gulp 挑戰 Grunt，背後的哲學 </a></p>

<p><a href="http://blog.darkthread.net/post-2014-09-25-gulp-grunt-bower-npm.aspx" target="_blank">Gulp, Grunt, Bower 以及 npm</a></p>

<p><a href="http://koanda.de/blog/53b9a67acba90doc1636380824-How-to-disable-Grunt-in-Sails-js" target="_blank">How to disable Grunt in Sails.js</a></p>

<p>好, 現在繼續, 在這邊有個小插曲</p>

<p>作者忘記把JQuery以及一些相關的檔案加進來, 他額外寫了一個blog, 參考
<a href="https://www.youtube.com/watch?v=zootilxmo4M" target="_blank">Building a Sails Application: Ep2a - adding jquery, custom.less, minor footer changes</a></p>

<p>底下是步驟</p>

<ol>
<li>先把JQuery下載下來, 我下載的是<a href="http://jquery.com/download/" target="_blank">The compressed, production jQuery 2.1.4</a></li>
<li>把jquery-2.1.4.min.js 改名成jquery.js, 放到assets\js\dependencies底下</li>
<li>到task\底下,找到<code>pipeline.js</code> (新的Sails把Grunt關於inject的部份放到tasks裡面的<code>pipeline.js</code>), 參考<a href="http://sailsjs.org/documentation/concepts/assets/task-automation" target="_blank">這裡</a></li>
<li>本來我們要把jquery放到pipeline.js, 結果發現pipeline.js已經幫我們處理好了</li>
</ol>


<p>從程式碼當中可以看到</p>

<pre><code class="javascript">// Client-side javascript files to inject in order
// (uses Grunt-style wildcard/glob/splat expressions)
var jsFilesToInject = [

  // Load sails.io before everything else
  'js/dependencies/sails.io.js',

  // Dependencies like jQuery, or Angular are brought in here
  'js/dependencies/**/*.js',

  // All of the rest of your client-side js files
  // will be injected here in no particular order.
  'js/**/*.js',

  // Use the "exclude" operator to ignore files
  // '!js/ignore/these/files/*.js'
];
</code></pre>

<p>OK, 所以我們就不用修改, 把jquery放到正確的目錄就好</p>

<p>接著新增<code>custom.less</code>
參考下面的內容, 放到<code>assets\styles</code>中</p>

<pre><code class="css">body {
  padding-top: 60px;
  padding-bottom: 40px;
}

.jumbotron {
  text-align: center;
}

.jumbotron h2 {
  font-size: 1.5em;
  letter-spacing: -1px;
  margin-bottom: 30px;
  text-align: center;
  font-weight: normal;
  color: gray;
}

.container .gray{
  color: gray
}

.container{
  .footer{
    width: 25%;
  }
}
</code></pre>

<p>接著, 我們修改importer.less, 新增<code>@import 'custom.less';</code> 如下表</p>

<pre><code class="css">// For example:
//
// @import 'variables/colors.less';
// @import 'mixins/foo.less';
// @import 'mixins/bar.less';
// @import 'mixins/baz.less';
//
// @import 'styleguide.less';
// @import 'pages/login.less';
// @import 'pages/signup.less';
//
// etc.

@import 'custom.less';
</code></pre>

<p>PS: 我剛剛把custom.less放到assets\styles中的時候, layout.ejs好像就會幫我把custom.css自動加到STYLE裡面去.. 超強的&hellip; 還是我自己之前有改過我忘記了&hellip; XD</p>

<p>作者有在layout.ejs新增了一些屬性, <code>navbar</code>以及<code>footer</code></p>

<p>相關程式碼我寫在下面</p>

<pre><code class="html">  &lt;div class="navbar navbar-inverse navbar-fixed-top"&gt;
      &lt;div class="container"&gt;
          &lt;a class="navbar-brand" href="http://kennytu.github.io/"&gt; activityOverload&lt;/a&gt;
      &lt;/div&gt;
  &lt;/div&gt;

  &lt;%- body %&gt;

  &lt;div class="container"&gt;
    &lt;hr&gt;
    &lt;footer class="footer pull-right"&gt;
      &lt;div&gt;
        &lt;a href="http://sailsja.com"&gt;sails.js&lt;/a&gt;
        &lt;div&gt;Tutorial by irl nathan...&lt;/div&gt;
      &lt;/div&gt;
    &lt;/footer&gt;
  &lt;/div&gt;
</code></pre>

<p>其中 &lt;%- body %> 上面的code是navbar, 下面的是footer</p>

<p>好的, 總之大功告成啦</p>

<p>現在要回頭修改index.ejs了</p>

<p>內容如下</p>

<p>```html</p>

<div class="container">
  <div class="jumbotron">
    <h1>activityOverload</h1>

    <h2>...tracking app activity better than the NSA since 1899.</h2>
    <div class="text-center">
      <a href="http://kennytu.github.io/user/new" style="text-align:center" class="btn btn-lg btn-success">Sign up now!</a>
    </div>
  </div>
</div>


<p>```</p>

<p>其中如果照著youtube上面寫的, button不會置中, 所以我就加了<code>div class="text-center"</code> 讓button置中, 我們使用的class是bootstrap的class, 請參考<a href="http://stackoverflow.com/questions/22578853/how-to-center-buttons-in-twitter-bootstrap-3" target="_balnk">這裡</a></p>

<p>好, 以上就是教學影片的第一課以及第二課, 附上網址</p>

<ol>
<li><a href="https://www.youtube.com/watch?v=1H0UfbGdwd8&list=PLWsZeJCry-F4K4iRImeB3-i0S5mw9Ak-W&index=1" target="_blank">activityOverlord - An overview of the project</a></li>
<li><a href="https://www.youtube.com/watch?v=ep6EQ5f82Ts&list=PLWsZeJCry-F4K4iRImeB3-i0S5mw9Ak-W&index=2" target="_blank">Building a Sails Application: Ep1 - Installing Sails and Create Initial Project</a></li>
<li><a href="http://irlnathan.github.io/sailscasts/blog/2013/08/22/building-a-sails-application-ep2a-a-quick-supplement-to-some-stuff-i-forgot-to-mention-in-episode-2/" target="_blank">Building a Sails Application: Ep2a - Stuff I Forgot to Mention in Episode two&hellip;because I&rsquo;m Old.</a></li>
<li><a href="https://www.youtube.com/watch?v=ZE7ye2G_H9Q&list=PLWsZeJCry-F4K4iRImeB3-i0S5mw9Ak-W&index=3" target="_blank">Building a Sails Application: Ep2 - Creating a sign-up page, adding twitter bootstrap</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
